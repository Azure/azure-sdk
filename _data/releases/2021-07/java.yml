entries:
- Name: azure-security-keyvault-certificates
  Version: 4.2.0
  DisplayName: Key Vault - Certificates
  ServiceName: Key Vault
  VersionType: GA
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-java/tree/azure-security-keyvault-certificates_4.2.0/sdk/keyvault/azure-security-keyvault-certificates/CHANGELOG.md
  ChangelogContent: |-
    #### Features Added
    - Changed default service version to `7.2`.
    - Added `KeyVaultCertificateIdentifier` to parse certificate URLs.

    #### Changes since 4.2.0-beta.6

    ##### Bug Fixes
    - Ensured that `RetryPolicy` and `HttpLogOptions` use a default implementation when creating Key Vault clients if not set or set to `null`.

    ##### New Features
    - `KeyVaultCertificateIdentifier` can now be used to parse any Key Vault identifier.

    ##### Breaking Changes
    - Removed service method overloads that take a `pollingInterval`, since `PollerFlux` and `SyncPoller` objects allow for setting this value directly on them.

    ##### Non-Breaking Changes
    - Renamed `certificateId` to `sourceId` in `KeyVaultCertificateIdentifier`.
    - Added the `@ServiceMethod` annotation to all public methods that call the Key Vault service in `CertificateClient` and `CertificateAsyncClient`.
  GroupId: com.azure
- Name: azure-security-keyvault-keys
  Version: 4.3.0
  DisplayName: Key Vault - Keys
  ServiceName: Key Vault
  VersionType: GA
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-java/tree/azure-security-keyvault-keys_4.3.0/sdk/keyvault/azure-security-keyvault-keys/CHANGELOG.md
  ChangelogContent: |-
    #### Features Added
    - Changed default service version to `7.2`.
    - Added `KeyVaultKeyIdentifier` to parse key URLs.
    - Added local-only support for `CryptographyClient` and `CryptographyAsyncClient` by providing a `JsonWebKey` during client creation.
    - Added `KeyType.OCT-HSM` to support oct-HSM key operations to support Managed HSM.
    - Added the `CreateOctKeyOptions` class and associated `createOctKey()` methods.
    - Added AES-GCM and AES-CBC support for encrypting and decrypting, including new `Encrypt` and `Decrypt` overloads.
    - Added the ability to set a public exponent on RSA keys during creation.
    - Made all getters for properties of a `JsonWebKey` public.

    #### Changes since 4.3.0-beta.8

    ##### Bug Fixes
    - Ensured that `RetryPolicy` and `HttpLogOptions` use a default implementation when creating Key Vault clients if not set or set to `null`.

    ##### New Features
    - Added `createOctKey()` and `createOctKeyWithResponse()` to `KeyClient` and `KeyAsyncClient`.
    - Added factory methods for RSA algorithms in `DecryptParameters` and `EncryptParameters`:
    - `createRsa15Parameters()`
    - `createRsaOaepParameters()`
    - `createRsaOaep256Parameters()`

    ##### Breaking Changes
    - Removed `EXPORT` from the `KeyOperation` enum.
    - Re-ordered parameters in the `EncryptResult` constructor to show `authenticationTag` before `additionalAuthenticatedData` to align with classes like `DecryptParameters`.
    - Removed service method overloads that take a `pollingInterval`, since `PollerFlux` and `SyncPoller` objects allow for setting this value directly on them.
    - Moved `EncryptParameters` and `DecryptParameters` from the `cryptography` package to the `cryptography.models` package and made them both `final`.

    ##### Non-Breaking
    - Renamed `keyId` to `sourceId` in `KeyVaultKeyIdentifier`.
    - `KeyVaultKeyIdentifier` can now be used to parse any Key Vault identifier.
    - Added the `@ServiceMethod` annotation to all public methods that call the Key Vault service in `KeyClient`, `KeyAsyncClient`, `CryptographyClient` and `CryptographyAsyncClient`.
  GroupId: com.azure
- Name: azure-security-keyvault-secrets
  Version: 4.3.0
  DisplayName: Key Vault - Secrets
  ServiceName: Key Vault
  VersionType: GA
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-java/tree/azure-security-keyvault-secrets_4.3.0/sdk/keyvault/azure-security-keyvault-secrets/CHANGELOG.md
  ChangelogContent: |-
    #### Features Added
    - Changed default service version to `7.2`.
    - Added `KeyVaultSecretIdentifier` to parse secret URLs.

    #### Changes since 4.3.0-beta.6

    ##### Bug Fixes
    - Ensured that `RetryPolicy` and `HttpLogOptions` use a default implementation when creating Key Vault clients if not set or set to `null`.

    ##### Breaking Changes
    - Removed service method overloads that take a `pollingInterval`, since `PollerFlux` and `SyncPoller` objects allow for setting this value directly on them.

    ##### Non-Breaking Changes
    - Renamed `secretId` to `sourceId` in `KeyVaultSecretIdentifier`.
    - `KeyVaultSecretIdentifier` can now be used to parse any Key Vault identifier.
    - Added the `@ServiceMethod` annotation to all public methods that call the Key Vault service in `SecretClient` and `SecretAsyncClient`.
  GroupId: com.azure
- Name: azure-messaging-eventhubs-checkpointstore-blob
  Version: 1.8.0
  DisplayName: Event Hubs - Azure Blob Storage Checkpoint Store
  ServiceName: Event Hubs
  VersionType: GA
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-java/tree/azure-messaging-eventhubs-checkpointstore-blob_1.8.0/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/CHANGELOG.md
  ChangelogContent: |-
    #### Dependency Updates

    - Update `azure-messaging-eventhubs` dependency to `5.8.0`.
    - Update `azure-storage-blob` to `12.12.0`.
  GroupId: com.azure
- Name: azure-messaging-eventhubs
  Version: 5.8.0
  DisplayName: Event Hubs
  ServiceName: Event Hubs
  VersionType: GA
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-java/tree/azure-messaging-eventhubs_5.8.0/sdk/eventhubs/azure-messaging-eventhubs/CHANGELOG.md
  ChangelogContent: |-
    #### Features Added

    - Add `EventHubClientBuilder.credential(String, String, AzureNamedKeyCredential)` overload.
    - Add `EventHubClientBuilder.credential(String, String, AzureSasCredential)` overload.
    - Add `EventProcessorClientBuilder.credential(String, String, AzureNamedKeyCredential)` overload.
    - Add `EventProcessorClientBuilder.credential(String, String, AzureSasCredential)` overload.
    - Add `EventHubConnectionStringProperties` to get connection string properties.

    #### Dependency Updates

    - Update `azure-core` dependency to `1.17.0`.
    - Update `azure-core-amqp` dependency to `2.2.0`.
  GroupId: com.azure
- Name: azure-messaging-servicebus
  Version: 7.2.3
  DisplayName: Service Bus
  ServiceName: Service Bus
  VersionType: Patch
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-java/tree/azure-messaging-servicebus_7.2.3/sdk/servicebus/azure-messaging-servicebus/CHANGELOG.md
  ChangelogContent: |-
    #### Fixed
    Fixed the issue that the second call of `ServiceBusReceiverClient.complete` is stuck when connection is broken.

    #### Dependency Updates
    - Upgraded `azure-core` dependency to `1.17.0`.
    - Upgraded `azure-core-amqp` dependency to `2.2.0`.
    - Upgraded `azure-core-http-netty` to `1.10.0`.
  GroupId: com.azure
- Name: azure-cosmos
  Version: 4.16.0
  DisplayName: Cosmos DB
  ServiceName: Cosmos DB
  VersionType: GA
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-java/tree/azure-cosmos_4.16.0/sdk/cosmos/azure-cosmos/CHANGELOG.md
  ChangelogContent: |-
    ##### Key Bug Fixes
    * Fixed an issue on handling partition splits during bulk operations in Gateway Mode.
    * Fixed an issue with `NumberFormatException` happening on requests on large containers.
    * Fixed an issue with BackOff time in `ThroughputController`.
    * Fixed an issue with `ThroughputControl` calculation.
    * Improved behavior when `CosmosClientBuilder.userAgentSuffix` exceeds 64 characters. Now `userAgentSuffix` will be honored as long as total userAgent value is less than 256 characters or truncated to fit the 256 characters limited.
    * Fixed issue when using client-side throughput control in combination with bulk upserts, previously resulting in unnecessarily upserting documents multiple times in some cases when getting throttled.
  GroupId: com.azure
- Name: azure-data-tables
  Version: 12.0.0
  DisplayName: Tables
  ServiceName: Tables
  VersionType: GA
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-java/tree/azure-data-tables_12.0.0/sdk/tables/azure-data-tables/CHANGELOG.md
  ChangelogContent: |-
    #### Bug fixes
    - Fixed issue where clients builders would not throw when calling `buildClient()` or `buildAsyncClient()` if no `endpoint` had been set.
    - Fixed issue where `TableClient`'s and `TableClientAsync`'s `submitTransaction()` and `submitTransactionWithResponse()` could not be called from inside a Reactor thread (e.g. calling it inside a chain of reactive operations, such as `myOtherOperation.then(result -> client.submitTransaction(transactionActions)`).
    - Fixed issue that would make an exception be raised when calling `submitTransaction()` if Java's SecurityManager was enabled and no `ReflectPermission` had been granted.

    #### New Features

    - Introduced the following classes:
    - `TableAccessPolicies`
    - `TableTransactionAction`
    - `TableTransactionActionType`
    - `TableTransactionFailedException`
    - `TableTransactionResult`
    - Added support for generating SAS tokens at the Account and Table Service level in all clients. Introduced the following related classes:
    - `TableAccountSasPermission`
    - `TableAccountSasResourceType`
    - `TableAccountSasService`
    - `TableAccountSasSignatureValues`
    - `TableSasIpRange`
    - `TableSasPermission`
    - `TableSasSignatureValues`
    - Added the following methods to `TableClient`, `TableAsyncClient`:
    - `listAccessPolicies()`
    - `setAccessPolicies()`
    - `setAccessPoliciesWithResponse()`
    - `generateSasToken()`
    - Added the following methods to `TableServiceClient`, `TableServiceAsyncClient`:
    - `getProperties()`
    - `getPropertiesWithResponse()`
    - `setProperties()`
    - `setPropertiesWithResponse()`
    - `getStatistics()`
    - `getStatisticsWithResponse()`
    - `generateAccountSasToken()`

    #### Breaking Changes

    - Removed the `TableBatch` and `TableAsyncBatch` types, as well as the methods `TableAsyncClient.createBatch()` and `TableClient.createBatch()`. In their place, batch operations can now be submitted via the following methods:
    - `TableAsyncClient.submitTransaction(List<TableTransactionAction> transactionalBatch)`
    - `TableAsyncClient.submitTransactionWithResponse(List<TableTransactionAction> transactionalBatch)`
    - `TableClient.submitTransaction(List<TableTransactionAction> transactionalBatch)`
    - `TableClient.submitTransactionWithResponse(List<TableTransactionAction> transactionalBatch, Duration timeout, Context context)`
    - Renamed `BatchOperationResponse` to `TableTransactionActionResponse`
    - `deleteEntity()` variants in `TableClient` and `TableAsyncClient` now accept an `ifUnchanged` flag instead of an `eTag` parameter for conditional operations. When said flag is set to `true`, the ETag of a given `TableEntity` will be matched with the ETag of the entity in the Table service.
    - Replaced `deleteEntityWithResponse(String partitionKey, String rowKey, String eTag)` with `deleteEntityWithResponse(TableEntity entity, boolean ifUnchanged)` in `TableAsyncClient`.
    - Replaced `deleteEntityWithResponse(String partitionKey, String rowKey, String eTag, Duration timeout, Context context)` with `deleteEntityWithResponse(TableEntity entity, boolean ifUnchanged, Duration timeout, Context context)` in `TableClient`.
    - Removed remaining public APIs supporting the use of `TableEntity` subclasses from `TableAsyncClient`.
    - Removed the following method overloads from `TableClient` and `TableAsyncClient`:
    - `upsertEntity(TableEntity entity, TableEntityUpdateMode updateMode)`
    - `updateEntity(TableEntity entity, TableEntityUpdateMode updateMode,
    boolean ifUnchanged)`
    - `getEntity(String partitionKey, String rowKey, List<String> select)`
    - Client builders now also throw an `IllegalStateException` when calling `buildClient()` and `buildAsyncClient()` if multiple forms of authentication are provided, with the exception of `sasToken` + `connectionString`; or if `endpoint` and/or `sasToken` are set alongside a `connectionString` and the endpoint and/or SAS token in the latter are different than the former, respectively.
    - The following methods and their `WithResponse` variants in `TableClient` and `TableAsyncClient` now throw an `IllegalArgumentException` instead of an `IllegalStateException` when an empty `TableEntity` is provided:
    - `createEntity()`
    - `upsertEntity()`
    - `updateEntity()`
    - `deleteEntity()`
  GroupId: com.azure
- Name: azure-core-amqp
  Version: 2.2.0
  DisplayName: Core - AMQP
  ServiceName: Core
  VersionType: GA
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-java/tree/azure-core-amqp_2.2.0/sdk/core/azure-core-amqp/CHANGELOG.md
  ChangelogContent: |-
    #### New Features
    - Adding support for AMQP data types SEQUENCE and VALUE.

    #### Dependency Updates
    - Upgraded `azure-core` dependency to `1.15.0`.
  GroupId: com.azure
- Name: azure-security-keyvault-administration
  Version: 4.0.0
  DisplayName: Key Vault - Administration
  ServiceName: Key Vault
  VersionType: GA
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-java/tree/azure-security-keyvault-administration_4.0.0/sdk/keyvault/azure-security-keyvault-administration/CHANGELOG.md
  ChangelogContent: |-
    - Initial release of `KeyVaultAccessControlClient` and `KeyVaultAccessControlAsyncClient` to manage role assignments and definitions for Managed HSM.
    - Initial release of `KeyVaultBackupClient` and `KeyVaultBackupAsyncClient` to backup and restore Managed HSM.

    #### Features Added
    - Changed default service version to `7.2`.
    - Added `KeyVaultKeyIdentifier` to parse key URLs.
    - Added local-only support for `CryptographyClient` and `CryptographyAsyncClient` by providing a `JsonWebKey` during client creation.
    - Added `KeyType.OCT-HSM` to support oct-HSM key operations to support Managed HSM.
    - Added the `CreateOctKeyOptions` class and associated `createOctKey()` methods.
    - Added AES-GCM and AES-CBC support for encrypting and decrypting, including new `Encrypt` and `Decrypt` overloads.
    - Added the ability to set a public exponent on RSA keys during creation.
    - Made all getters for properties of a `JsonWebKey` public.

    #### Changes since 4.0.0-beta.7

    ##### Bug Fixes
    - Ensured that `RetryPolicy` and `HttpLogOptions` use a default implementation when creating Key Vault clients if not set or set to `null`.

    ##### Breaking Changes
    - Renamed `beginSelectiveRestore()` to `beginSelectiveKeyRestore()` in `KeyVaultBackupClient` and `KeyVaultBackupAsyncClient`. Made the aforementioned operation return the new `KeyVaultSelectiveKeyRestoreOperation` instead of a `KeyVaultRestoreOperation`.
    - Changed the final return type of `beginRestore()` and `beginSelectiveKeyRestore()`'s poller types from `Void` to the new `KeyVaultRestoreResult` and `KeyVaultSelectiveKeyRestoreResult`, respectively.
    - `KeyVaultBackupClient` and `KeyVaultBackupAsyncClient`'s long-running operations now throw a `RuntimeException` when cancellation is attempted, as it is not currently supported.
    - Made `KeyVaultRoleDefinition` flat, as opposed to it having a `KeyVaultRoleDefinitionProperties` member with more properties inside of it.
    - Moved `roleScope` from `KeyVaultRoleAssignment` to `KeyVaultRoleAssignmentProperties` and renamed it to `scope`.
    - Moved `SetRoleDefinitionOptions` from the `options` package to the `models` package.
    - Removed `roleType` from `SetRoleDefinitionOptions`.
    - Removed service method overloads that take a `pollingInterval`, since `PollerFlux` and `SyncPoller` objects allow for setting this value directly on them.
    - Delete methods on the `KeyVaultAccessControlClient` now return a `void` or `Mono<Void>` and ignore HTTP `404`s.
    - Renamed `jobId` and `getJobId()` to `operationId` and `getOperationId()` in `KeyVaultLongRunningOperation` and its children classes.
    - Made the following classes `final`:
    - `KeyVaultDataAction`
    - `KeyVaultRoleDefinitionType`
    - `KeyVaultRoleType`
    - `SetRoleDefinitionOptions`
  GroupId: com.azure
- Name: azure-communication-common
  Version: 1.0.3
  DisplayName: Communication Common
  ServiceName: Communication
  VersionType: Patch
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-java/tree/azure-communication-common_1.0.3/sdk/communication/azure-communication-common/CHANGELOG.md
  ChangelogContent: Updated `azure-communication-common` version
  GroupId: com.azure
- Name: azure-security-keyvault-jca
  Version: 1.0.0
  DisplayName: Key Vault - JCA
  ServiceName: Key Vault
  VersionType: GA
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-java/tree/azure-security-keyvault-jca_1.0.0/sdk/keyvault/azure-security-keyvault-jca/CHANGELOG.md
  ChangelogContent: |-
    #### New Features
    - Load JRE key store certificates to AzureKeyVault key store. ([#21845](https://github.com/Azure/azure-sdk-for-java/pull/21845))
    - Support properties of azure.cert-path.well-known and azure.cert-path.custom to support load cert from file system. ([#21947](https://github.com/Azure/azure-sdk-for-java/pull/21947))
  GroupId: com.azure

