entries:
- Name: Azure.Monitor.OpenTelemetry.AspNetCore
  Version: 1.2.0-beta.1
  DisplayName: OpenTelemetry AspNetCore
  ServiceName: Monitor
  VersionType: Beta
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-net/tree/Azure.Monitor.OpenTelemetry.AspNetCore_1.2.0-beta.1/sdk/monitor/Azure.Monitor.OpenTelemetry.AspNetCore/CHANGELOG.md
  ChangelogContent: |-
    #### Features Added

    * Added Azure Container Apps resource detector.
    ([#41803](https://github.com/Azure/azure-sdk-for-net/pull/41803))

    * Added `Azure.Monitor.OpenTelemetry.LiveMetrics`, enabling the sending of [live
    metrics
    data](https://learn.microsoft.com/azure/azure-monitor/app/live-stream).
    The newly added `EnableLiveMetrics` property is set to `true` by default. This
    property can be set to `false` to disable live metrics.
    ([#41872](https://github.com/Azure/azure-sdk-for-net/pull/41872))

    - Added an experimental feature for logs emitted within an active tracing
    context to follow the Activity's sampling decision. The feature can be enabled
    by setting `OTEL_DOTNET_AZURE_MONITOR_EXPERIMENTAL_ENABLE_LOG_SAMPLING`
    environment variable to `true`.
    ([#41665](https://github.com/Azure/azure-sdk-for-net/pull/41665))
- Name: Azure.Communication.Common
  Version: 1.3.0
  DisplayName: Communication Common
  ServiceName: Communication
  VersionType: GA
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-net/tree/Azure.Communication.Common_1.3.0/sdk/communication/Azure.Communication.Common/CHANGELOG.md
  ChangelogContent: |-
    #### Features Added
    - Added support for a new communication identifier `MicrosoftTeamsAppIdentifier`.
    - Introduction of `MicrosoftTeamsAppIdentifier` is a breaking change. It will impact any code that previously depended on the use of UnknownIdentifier with rawIDs starting with `28:orgid:`, `28:dod:`, or `28:gcch:`.
- Name: Azure.Extensions.AspNetCore.Configuration.Secrets
  Version: 1.3.1
  DisplayName: Secrets Configuration Provider for .NET
  ServiceName: Extensions
  VersionType: Patch
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-net/tree/Azure.Extensions.AspNetCore.Configuration.Secrets_1.3.1/sdk/extensions/Azure.Extensions.AspNetCore.Configuration.Secrets/CHANGELOG.md
  ChangelogContent: |-
    #### Bugs Fixed

    - Fix several issues related to ThreadPool starvation for synchronous scenarios
- Name: Microsoft.Extensions.Azure
  Version: 1.7.2
  DisplayName: Azure client library integration for ASP.NET Core
  ServiceName: Extensions
  VersionType: Patch
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-net/tree/Microsoft.Extensions.Azure_1.7.2/sdk/extensions/Microsoft.Extensions.Azure/CHANGELOG.md
  ChangelogContent: |-
    #### Bugs Fixed

    - Fix several issues related to ThreadPool starvation for synchronous scenarios
- Name: Azure.Extensions.AspNetCore.DataProtection.Blobs
  Version: 1.3.3
  DisplayName: Blob Storage Key Store for .NET Data Protection
  ServiceName: Extensions
  VersionType: Patch
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-net/tree/Azure.Extensions.AspNetCore.DataProtection.Blobs_1.3.3/sdk/extensions/Azure.Extensions.AspNetCore.DataProtection.Blobs/CHANGELOG.md
  ChangelogContent: |-
    #### Bugs Fixed

    - Fix several issues related to ThreadPool starvation for synchronous scenarios
- Name: Azure.Extensions.AspNetCore.DataProtection.Keys
  Version: 1.2.3
  DisplayName: Key Encryptor for .NET Data Protection
  ServiceName: Extensions
  VersionType: Patch
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-net/tree/Azure.Extensions.AspNetCore.DataProtection.Keys_1.2.3/sdk/extensions/Azure.Extensions.AspNetCore.DataProtection.Keys/CHANGELOG.md
  ChangelogContent: |-
    #### Bugs Fixed

    - Fix several issues related to ThreadPool starvation for synchronous scenarios
- Name: Azure.Messaging.EventGrid
  Version: 4.22.0
  DisplayName: Event Grid
  ServiceName: Event Grid
  VersionType: GA
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-net/tree/Azure.Messaging.EventGrid_4.22.0/sdk/eventgrid/Azure.Messaging.EventGrid/CHANGELOG.md
  ChangelogContent: |-
    #### Features Added

    - Added new Storage Task Assignment system events.
    - Added new AVS system events.
    - Added `Metadata` property to `AcsChatThreadCreatedEventData` system event.
- Name: Azure.Messaging.EventHubs
  Version: 5.11.0
  DisplayName: Event Hubs
  ServiceName: Event Hubs
  VersionType: GA
  Hidden: false
  ChangelogUrl: https://github.com/Azure/azure-sdk-for-net/tree/Azure.Messaging.EventHubs_5.11.0/sdk/eventhub/Azure.Messaging.EventHubs/CHANGELOG.md
  ChangelogContent: |-
    #### Features Added

    - Added a `CheckpointPosition` struct to `Azure.Messaging.EventHubs.Processor` to use when updating a checkpoint. The specified position indicates that an event processor should begin reading from the next event. Added new `UpdateCheckpointAsync` overloads to `CheckpointStore`, `PluggableCheckpointStoreEventProcessor<TPartition` and `EventProcessor<TPartition>` that accept the `CheckpointPosition` struct instead of individual values for offset and sequence number.

    #### Breaking Changes

    - The type of several existing values in the `EventData.SystemProperties` collection have been changed so that they are properly represented as .NET string types.  Previously, the underlying AMQP types were unintentionally returned, forcing callers to call `ToString()` to read the value.

    This is a behavioral breaking change that will impacts only those callers who were explicitly casting system property values to `AmqpAddress` or `AmqpMessageId` before calling `ToString()`.   The affected system properties are:
    - MessageId
    - CorrelationId
    - To
    - ReplyTo

    - The base implementations of both `UpdateCheckpointAsync` method overloads in `PluggableCheckpointStoreEventProcessor<TPartition>` and `EventProcessor<TPartition>` now choose sequence number over offset when writing a checkpoint and both values are provided. Previously, writing a checkpoint prioritized offset over sequence number.  There is no behavioral change for those using the official checkpoint store implementations.

    #### Bugs Fixed

    - Load balancing is no longer blocked when event processing for a lost partition does not honor the cancellation token.  Previously, long-running processing could cause delays in load balancing that resulted in ownership not being renewed for all partitions.

    - Adjusted retries to consider an unreachable host address as terminal.  Previously, all socket-based errors were considered transient and would be retried.

    - Fixed a race condition that could lead to a synchronization primitive being double-released if `IsRunning` was called concurrently while starting or stopping an event processor.

    - Fixed an issue with event processor validation where an exception for quota exceeded may inappropriately be surfaced when starting the processor.

    - In the rare case that an event processor's load balancing and health monitoring task cannot recover from an error, it will now properly surrender ownership when processing stops.

    - Reduced the timeout for transient service failures when starting the buffered producer. This ixed an issue where the buffered producer appeared to hang for an extended period of time when starting if it had issues querying Event Hub metadata for the first time.

    - Fixed the logic used to set the TimeToLive value of the AmqpMessageHeader for received messages to be based on the difference of the AbsoluteExpiryTime and CreationTime properties of the AmqpMessageProperties.

