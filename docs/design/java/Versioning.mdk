[INCLUDE=../general/Versioning.mdk]
 
~ Must {#java-use-semver}
ensure that all releases are versioned using [semantic versioning](https://semver.org/).
~

~ MustNot {#java-no-0-majors}
have releases of client libraries with a major version of 0, even for early preview releases.
~

~ Must {#java-repo-version-next-GA}
have the version number of all pom files in the repo be the version number intended for the next GA release.
~

### Snapshot Releases

Snapshot releases have a semver version number of the form `x.y.z-SNAPSHOT`. Snapshot releases go into a separate directory on Maven Central, and version numbers do not need to be incremented or changed for each snapshot release (instead, the next release version number should be used, with `-SNAPSHOT` appended). These releases can be made as frequently as desired, and users understand that they may be alpha or beta quality, and even have the API shift underneath them. They are often released automatically as part of a CI/CD process. Users of snapshot releases have to opt-in to using the snapshots repository by explicitly referencing it from their own Maven pom.xml file.

~ MustNot {#java-no-snapshot}
have a qualifier of `-SNAPSHOT` on any client library.
~

### Preview Releases

Preview releases are made when code hits certain milestones and wider community adoption and testing is warranted. Preview releases have a `-preview.N` qualifier, where the N value increments for each preview release for a given version. Preview releases must be made through the engineering systems pipeline.

~ Must {#java-preview-qualifer-required}
have a qualifier of `-preview.N` for all preview releases.
~

### GA Releases

Official releases must be done only once per version increment, and must only be done through the engineering system pipeline.

~ Must {#java-use-deprecated-for-retiring-api}
use the `@Deprecated` annotation and the `@deprecated` JavaDoc tag when a feature is to be removed in a future major release. Explain what is being removed, and how developers should transition to new API.
~

~ Must {#java-deprecation-discuss-before-removal}
discuss all deprecations and deprecation-removals with the [Java architect](mailto:adparch@microsoft.com). No API should be broken after a GA release without [Java architect](mailto:adparch@microsoft.com) approval.
~

~ MustNot {#java-do-not-change-api-in-non-major-release}
remove or change API in any patch or minor release. All API changes must occur in conjunction with a major version increment.
~

~ MustNot {#java-must-indicate-deprecation-before-change}
remove or change API until there has been at least one GA release that contains the deprecation notices in the code. This enables developers to receive deprecation warnings at build time in their development projects.
~

~ MustNot {#java-no-qualifier-in-GA}
release any client library as GA with a snapshot or preview release qualifier.
~