This section covers Java-specific requirements to successfully implement and release a Java client library for Azure, that must be followed in addition to the common guidelines presented above. There exists a separate document for [Java best practices](https://github.com/Azure/azure-sdk/blob/master/docs/design/java/BestPractices.md) that teams should also endeavour to follow.

## Scope {#java-scope; @h1-h2: decimal; }

~ Must {#java-scope-inclusion}
use the Maven group ID of `com.azure`, and the Java package name of `com.azure.*`, for all Java Azure client libraries. All client libraries in this namespace must follow the requirements outlined in this specification document.
~

## Platform Support

### Operating Systems

~ May {#android-support}
test against Android to ensure compatibility.
~

### Supported Java Versions

All Azure client libraries are baselined on Java 8. Developers are encouraged to make use of the benefits offered in Java 8, such as streams, lambda expressions, new date/time API, etc.

~ MustNot {#java-do-not-exceed-jdk-baseline-features}
use any language or API feature from a release of Java beyond Java 8. 
~

~ Must {#java-ensure-jdk-baseline-compilation}
test to ensure that all code compiles and runs as expected on Java 8.
~

~ MustNot {#java-avoid-private-impl}
use any private implementation API, such as those in the `com.sun.*` namespace, as these classes are unavailable from JDK 9 onwards. 
~

~ Must {#java-ensure-jdk-lts-compilation}
compile against the latest Java long-term support release, to ensure that code continues to compile, and unit tests continue to run and pass. It is critical that when this is performed, that the Maven build configuration is temporarily adjusted to use the Java LTS APIs only.
~

~ Must {#java-jdk-build-target}
build and test client libraries against a freely-available, open source, non-commercial build of OpenJDK (e.g. [AdoptOpenJDK](http://adoptopenjdk.net) or [Azule Zulu](https://www.azul.com/downloads/zulu/)), rather than Oracle JDK or any other commercial JDK build.
~

## Versioning

~ Must {#java-use-semver}
ensure that all Maven releases are versioned using [semantic versioning](https://semver.org/).
~

~ MustNot {#java-no-0-majors}
have releases of client libraries with a major version of 0, even for early preview releases.
~

~ Todo
Include wider versioning discussion - side by side, connecting to multiple service versions at once, etc. This is [currently covered in a separate discussion document](https://github.com/Azure/azure-sdk/blob/master/docs/design/java/Versioning.md) whilst being worked through.
~

### Beta API

API needs sufficient 'bake time' to ensure it works in the real world. Rushing to have all API ready for the next release often leads to API regrets, many of which could have been avoided if API could have been reviewed by more users before being committed to.

~ Must {#java-use-deprecated-for-feature-dev}
use the `@Beta` annotation for API that are under development.
~

~ Must {#java-explain-experimental-features}
provide sufficient explanation to clarify that the API is experimental and may change.
~

~ Must {#java-beta-is-short-term}
remove all beta API annotations before any GA release.
~

### Snapshot Releases

Snapshot releases have a semver version number of the form `x.y.z-SNAPSHOT`. Snapshot releases go into a separate directory on Maven Central, and version numbers do not need to be incremented or changed for each snapshot release (instead, the next release version number should be used, with `-SNAPSHOT` appended). These releases can be made as frequently as desired, and users understand that they may be alpha or beta quality. They can be released automatically as part of a CI/CD process. Users of snapshot releases have to opt-in to using the snapshots repository by explicitly referencing it from their own Maven pom.xml file.

~ Must {#java-preview-qualifer-required}
have a qualifier of `-SNAPSHOT`, with no additional version number appended to the end of this.
~

~ Must {#java-preview-version-next-GA}
have the version number represent the version intended for the next GA release. For example, a preview release of `1.0.2-SNAPSHOT` should be read to mean that it is a snapshot release of version 1.0.2, and that this snapshot will ultimately be superceded by the GA release of 1.0.2 when it becomes available.
~

### Preview Releases

Preview releases are made when code hits certain milestones and wider community adoption and testing is warranted. Preview releases replace the `-SNAPSHOT` qualifier with a `-preview.N` qualifier, where the N value increments for each preview release for a given version. Preview releases must be made through the engineering systems pipeline.

~ Must {#java-preview-qualifer-required}
have a qualifier of `-preview.N` for all preview releases.
~

~ Must {#java-preview-version-next-GA}
have the version number represent the version intended for the next GA release. For example, a preview release of `1.0.2-beta2` should be read to mean that it is the second beta release of version 1.0.2, and that this release will be superceded by the GA release of 1.0.2 when it becomes available.
~

### GA Releases

Anything that is not a snapshot or preview release should be considered an official GA release. Official releases must be done only once per version increment, and must only be done through the engineering system pipeline.

~ Must {#java-use-deprecated-for-retiring-api}
use the `@Deprecated` annotation and the `@deprecated` JavaDoc tag when a feature is to be removed in a future major release. Explain what is being removed, and how developers should transition to new API.
~

~ Must {#java-deprecation-discuss-before-removal}
discuss all deprecations and deprecation-removals with the [Java architect](mailto:adparch@microsoft.com). No API should be broken after a GA release without [Java architect](mailto:adparch@microsoft.com) approval.
~

~ MustNot {#java-do-not-change-api-in-non-major-release}
remove or change API in any patch or minor release. All API changes must occur in conjunction with a major version increment.
~

~ MustNot {#java-must-indicate-deprecation-before-change}
remove or change API until there has been at least one GA release that contains the deprecation notices in the code. This enables developers to receive deprecation warnings at build time in their development projects.
~

~ MustNot {#java-no-qualifier-in-GA}
release any client library as GA with a snapshot or preview release qualifier.
~

## Naming

To make understanding our Azure SDK simpler, it is important that we apply a consistent naming policy across all client libraries. There are a few aspects to this: Java package names, as well as our `groupId` and `artifactId` names for use in our Maven pom.xml file.

### Determing Group and Service Name

~ Todo
Refer reader to external document that details how to determine which group and service name an client library should use.
~

### Java Package Naming

~ Must {#java-consistent-package-naming}
use the package naming pattern of all lowercase letters (no camel case is allowed), without spaces, hyphens, or underscores. For example, Azure Key Vault would be in `com.azure.<group>.keyvault` - note that the two words 'Key' and 'Vault' are brought together to `keyvault`, instead of `keyVault`, `key_vault`, or `key-vault`.
~

~ Must {#java-consistent-package-structure}
ensure that all code for a client library resides in a package which takes the form `com.azure.<group>.<service>[.<feature>]`. Sub-packages for various features of the client library are fine, and can be named as appropriate.
~

~ MustNot {#java-do-not-leak-impl}
allow implementation code (i.e. code that does not form part of the public API) to be mistaken as public API. There are two valid arrangements for implementation code, one (or both) of which must be followed:

1. Implementation classes can be placed within a subpackage named `implementation`.
2. Implementation classes can be made package-private and placed within the same package as the consuming class.
~

## Maven

~ Must {#java-maven-use-parent-pom}
explicitly specify the Azure Java SDK parent POM file for all client libraries. This enables centralized dependency and build tool management.
~

~ Must {#java-maven-groupid}
specify the `groupId` as `com.azure`.
~

~ Must {#java-maven-artifactid}
specify the `artifactId` to be of the form `azure-<group>-<service>`, for example, `azure-storage-blob`. In cases where the client library has multiple children modules, it is acceptable for the root pom.xml `artifactId` to be of the form `azure-<group>-<service>-parent`.
~

~ Must {#java-maven-name}
specify the `name` element to take the form `Microsoft Azure client library for <service name>`.
~

~ Must {#java-maven-description}
specify the `description` element to be a slightly longer statement along the lines of `This package contains the Microsoft Azure <service> client library`.
~

~ Must {#java-maven-url}
specify the `url` element to point to the root of the GitHub repository containing this source code, which will be frequently (although not always or required to be) present at `https://github.com/Azure/azure-sdk-for-java`.
~

~ Must {#java-maven-scm}
specify the source code management section, to specify where the source code resides for the client library. If the source code is located in the https://github.com/Azure/azure-sdk-for-java repository, then the following form must be used:

```
<scm>
    <url>scm:git:https://github.com/Azure/azure-sdk-for-java</url>
    <connection>scm:git:git@github.com:Azure/azure-sdk-for-java.git</connection>
    <tag>HEAD</tag>
</scm>
```

In cases where the repository storing the code for the client library is different, substitute as necessary to ensure the correct details are provided.
~

~ MustNot {#java-maven-developers}
change the `developers` section of the pom.xml file - it must only list a developer `id` of `microsoft` and a `name` of `Microsoft Corporation`.
~

~ MustNot {#java-maven-developers-no-one-else}
include additional names to represent the developers involved in the project.
~

## Dependencies

A separate document is maintained for tracking [permitted Java dependencies](https://github.com/Azure/azure-sdk/blob/master/docs/design/java/Dependencies.md), and explaining how to add new, or upgrade existing, dependencies. All developers should familiarise themselves with this document.

~ MustNot {#java-no-new-dependencies}
introduce new dependencies on third party libraries that are already referenced from the parent POM, without first seeking permission from the [Java architect](mailto:adparch@microsoft.com).
~

~ MustNot {#java-no-dependency-version-overrides}
specify or change dependency versions in your client library pom.xml file. All dependency versioning must be centralized through the common parent POM (refer to the [dependencies document](https://github.com/Azure/azure-sdk/blob/master/docs/design/java/Dependencies.md) for more details).
~

## Coding Conventions

~ Must {#java-be-idiomatic}
ensure that all APIs are idiomatic for Java developers and follow best practices.
~

### Service Client

Azure services will be exposed to Java developers as one or more service client types plus a set of supporting types. The guidelines in this section describe patterns for the design of a service clients and their members.

~ Must {#java-client-suffix}
name service client types with the Client suffix, e.g. `ConfigurationClient`.
~

~ Must {#java-client-root-package}
place service clients in the root package of their corresponding client library, e.g. `com.azure.storage.blob.BlobClient`, as `com.azure.storage.blob` is considered the root package in this example.
~

~ Must {#java-client-extend-serviceclient}
extend from the `ServiceClient` super class.
~

~ Must {#java-client-immutable}
ensure that all service client classes are immutable upon instantiation.
~

~ Must {#java-client-fluent-builders}
provide a fluent builder API that starts with a public static `builder()` method and concludes with a `build()` method that returns the instance of the fully-initialised, immutable service client.
~

~ MustNot {#java-client-no-ctor}
provide any `public` or `protected` constructors.
~

#### Common Service Client Patterns

~ Must {#java-crud-naming}
prefer the use of the following terms for CRUD operations:

|Verb             |Parameters        |Returns                 |Comments                                                                                                                |
|-----------------|------------------|------------------------|------------------------------------------------------------------------------------------------------------------------|
| upsert\<noun>   |key, item         |Updated or created item |Create new item or update existing item. Verb is primarily used in database-like services.                              |
| set\<noun>      |key, item         |Updated or created item |Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service.            |
| create\<noun>   |key, item         |Created item            |Create new item. Fails if item already exists.                                                                          |
| update\<noun>   |key, partial item |Updated item            |Fails if item does not exist.                                                                                           |
| replace\<noun>  |key, item         |Replace existing item   |Completely replaces an existing item. Fails if the item does not exist.                                                 |
| delete\<noun>   |key               |Deleted item, or `null` |Delete an existing item. Will succeed even if item did not exist. Deleted item may be returned, if service supports it. |
| add\<noun>      |index, item       |Added item              |Add item to a collection. Item will be added last, or into the index position specified.                                |
| get\<noun>      |key               |Item                    |Will return null if item does not exist.                                                                                |
| list\<noun>     |                  |Items                   |Return list of items. Returns empty list if no items exist.                                                             |
| \<noun>Exists   |key               |`boolean`               |Return `true` if the item exists.                                                                                       |
~

### Model classes

~ Must {#java-model-class-use-ctor}
provide public constructors for all model classes.
~

~ MustNot {#java-model-class-no-builders}
offer a builder class for model classes.
~

~ Must {#java-model-class-fluent}
provide a fluent API for configuration. Name setter methods simply after the property being set, e.g. `proxy(Proxy p)`, and have all setter methods return `this`.
~

### Async API

Due to the nature of internet-based communication, asynchronous APIs are a must to ensure efficient use of system resources (threads and their stacks).

~ Must {#java-async-methods}
provide asynchronous API.
~

~ Must {#java-async-client}
offer an async service client named `<ServiceName>AsyncClient`, as well as a builder named `<ServiceName>AsyncClientBuilder`. More than one service client may be offered for a single service.
~

~ Must {#java-async-use-project-reactor}
use [Project Reactor](http://projectreactor.io) to provide end-users with a high-quality async API.
~

~ MustNot {#java-async-no-other-libs}
use any other async APIs, such as `CompletableFuture` and [RxJava](https://github.com/ReactiveX/RxJava).
~

~ MustNot {#java-no-async-naming-pattern}
use the suffix `Async` in methods that perform operations asynchronously. Let the fact the user has an instance of an 'async client' provide this context.
~

~ MustNot {#java-async-no-overloads}
provide multiple asynchronous methods for a single REST endpoint, unless to provide overloaded methods to enable alternative or optional method parameters.
~

~ Must {#java-async-useful-return-type}
ensure that all async methods return a type that contains all information to enable a developer to inspect the metadata related to the service call (e.g. for HTTP endpoints, the async method call must return a type that enables the developer to read the headers, status code, and all other useful information).
~

~ MustNot {#java-async-no-custom-API}
write custom APIs for streaming or async operations - make use of the existing functionality offered in the Azure Java SDK base class library. Where necessary, additional functionality should be introduced into the Azure Java SDK base class library after discussions with the [Java architect](mailto:adparch@microsoft.com).
~

~ MustNot {#java-async-no-blocking}
include blocking calls inside client library code. Code must be async throughout entire codebase. Use [BlockHound](https://github.com/reactor/BlockHound) to detect blocking calls in async APIs.
~

### Sync API

~ Must {#java-sync-methods}
provide synchronous API.
~

~ Must {#java-sync-client}
offer a sync service client named `<ServiceName>Client`, as well as a builder named `<ServiceName>ClientBuilder`. More than one service client may be offered for a single service.
~

~ MustNot {#java-sync-cancellations}
provide API that accepts a `CancellationToken` parameter. Cancellation is not a common pattern in Java, and developers who want to be able to cancel requests will be encouraged to use the async API instead.
~

### Pipelines

~ Must {#java-pipelines-use-existing-api}
use the existing pipelines APIs for all requests to Azure services, including any requirements for authentication, telemetry, logging, tracing, retries, cancellations, etc. Do not use other HTTP clients or means of connecting to Azure services.
~

~ Must {#java-pipelines-expose-policies}
expose any custom policies required to connect to the service. This allows developers who create a completely new HTTP pipeline instance to include the provided policies in their instance, enabling easier connectivity to the service.
~

### Logging

Logging is critical to provide developers insight into why things are operating the way they are, and to help diagnose issues that are preventing their successful use of our SDK. This section details Java-specific logging requirements. There are more general logging requirements in the [general logging section](#general-logging).

~ Must {#java-logging-use-slf4j}
use the APIs provided by the [SLF4J](https://www.slf4j.org/) project, as this is the only logging API to be used in all Azure Java client libraries. Refer to the [SLF4J user manual](https://www.slf4j.org/manual.html) for additional guidance.
~

~ MustNot {#java-logging-no-static-logger}
create static logger instances, as these will be shared among all client library instances running in a JVM instance.
~

### Exceptions

Java offers checked and unchecked exceptions, where checked exceptions force the user to introduce verbose `try .. catch` code blocks and handle each specified exception. The position we take in the Azure SDK for Java is to primarily use unchecked exceptions, to avoid this verbosity, and to improve scalability issues inherent with checked exceptions in large applications.

~ Must {#java-exceptions-unchecked-only}
use unchecked exceptions for CRUD operation calls.
~

~ Must {#java-exceptions-javadoc}
specify all checked and unchecked exceptions thrown in a method within the JavaDoc documentation on the method as `@throws` statements.
~

~ Must {#java-exceptions-use-existing-azure-types}
use the existing exception types present in azure-common whenever an exception arises due to a failure to complete a cloud request. Avoid creating new types unless absolutely necessary.
~

~ Must {#java-exceptions-use-existing-jdk-types}
favour the use of a few standard Java exceptions for pre-condition checking:

| Exception                       | When to use                                                    |
|---------------------------------|----------------------------------------------------------------|
| `IllegalArgumentException`      | When a method argument is non-null, but inappropriate          |
| `IllegalStateException`         | When the object state means method invocation cannot proceed   |
| `NullPointerException`          | When a method argument is required to be non-null, but is null |
| `UnsupportedOperationException` | When an object does not support method invocation              |
~

~ Todo
Provide links to the relevant Azure exception classes. Ensure these classes offer clarity around status code, error messages from service, any correlation IDs, whether the error was a result of the caller or service, etc.

Consider the possibility of introducing separate exception types for the service, and for issues that happen within the client (i.e. when the user input cannot be properly parsed).
~

### Tooling

#### SpotBugs

~ Must {#java-tooling-code-linter}
run SpotBugs using the centralised Azure SDK SpotBugs rule set. As all projects must have a Maven inheritance hierarchy that includes the Azure SDK Maven pom.xml, this is configured automatically, and the tooling will execute by calling `mvn spotbugs:spotbugs`. It will also execute as part of the build process, failing the build if any SpotBugs issue is found.
~

~ MustNot {#java-tooling-code-linter-test-no-commit-on-failure}
push code to a repo that breaks SpotBugs. Because the build is set to fail if any SpotBugs issue is found, it should always be a case that the build can complete successfully before any code is committed and pushed. If a build fails, a SpotBugs HTML report can be generated by calling `mvn spotbugs:spotbugs` on the command line. This report will provide context about the failure and point the developer towards fixing it.
~

#### CheckStyle

~ Must {#java-tooling-code-style}
run CheckStyle, in a similar fashion to SpotBugs above. All relevant rules will be run on each build. Whilst CheckStyle failures are less critical, all failures must be resolved prior to a GA release. If a build fails, a CheckStyle HTML report can be generated by calling `mvn checkstyle:checkstyle` on the command line. This report will provide context about the failure and point the developer towards fixing it.
~

#### JaCoCo

Unit tests, as covered in the next section, are an important means of ensuring that our code does what we expect it to, and that it continues to do what we expect as the codebase is developed in future releases. Having a sense of how well our codebase is covered in tests is therefore a useful goal, and this is where [JaCoCo](https://www.eclemma.org/jacoco/) can be useful - it generates HTML reports stating the coverage our unit tests have on the codebase.

~ Must {#java-test-coverage}
ensure that code test coverage is satisfactory by producing a JaCoCo report using `mvn jacoco:report`.
~

### Testing

~ Must {#java-testing-complete}
ensure that the unit tests cover important code paths and that all branches in these code paths are tested comprehensively.
~

~ Must {#java-testing-have-mock-and-live-tests}
have a mock test suite testing functionality at a higher level, in addition to unit tests. Mock tests may also support running 'live' against real Azure services. Mock tests can be written as long-form unit tests, or else they may be written with other testing / mocking tools, as necessary.
~

~ Must {#java-testing-commit-mocks-to-repo}
provide all necessary mock and live tests as part of the client library repository.
~

~ Must {#java-testing-mocks-run-fast}
ensure that all mock tests execute quickly and are integrated into the main unit test suite.
~

~ Must {#java-testing-mocks-give-exec-instructions}
provide instructions as part of your Contributing.<span></span>md file to detail how to execute these tests (if different than calling `mvn test`), including any environment variables, running services, etc. Test that these instructions are complete by attempting to run the tests on a separate machine.
~

## Documentation

~ MustNot {#java-maven-no-dependency-versions-in-docs}
include version details when specifying Maven dependency statements. Always refer the user back to a central document detailing how to use the Azure SDK for Java BOM.
~

~ Todo
Link to central document detailing Azure SDK BOM.
~

### Code Samples

Code samples are small applications that demonstrate a certain feature that is relevant to the client library, allowing developers to more quickly understand the full usage requirements of a particular set of API. Code samples should not be any more complex than they need to be to demonstrate this feature - they should not become full applications. At all times code samples should have a very high signal:noise ratio between useful code and boilerplate code for non-related reasons.

~ Must {#java-samples-location}
place code samples within the `/src/samples/java` directory within the client library root directory. This ensures that the code will be compiled, but not packaged into the resulting jar.
~

~ Must {#java-samples-execution}
ensure that each sample file is executable by including a `public static void main(String[] args)` method.
~

~ Must {#java-samples-use-latest-conventions}
use the latest coding conventions when creating samples. It is recommended to make liberal use of modern Java syntax and API such as diamond operators, etc as they remove boilerplate from your samples and let your library's API shine through better. Do not use any language feature or API of Java beyond the current Java baseline versioned employed by the SDK, currently this is JDK 8.
~

~ Must {#java-samples-maintained}
keep sample code maintained and using the latest major release of the library. Sample code repos must be reviewed for freshness and at least one commit must be made to a sample repo every semester - at least to update dependencies to the latest release and to ensure that the code continues to function as expected.
~

~ Must {#java-samples-easy-grafting}
ensure that sample code snippets can be easily grafted from the documentation into a users own application and not tied to variable declarations not covered in previous snippets in the content.
~

~ Must {#java-samples-keep-simple}
ensure that code snippets are optimized for ease of reading and comprehension over code compactness and efficiency unless the article context demands otherwise.
~

~ Must {#java-samples-cross-platform}
ensure that samples can run in Windows, macOS, and Linux development environments, and are not tied to a non-standard developer toolchain.
~

### JavaDoc

~ Must {#java-javadoc-easy-generation}
ensure that anybody can clone the repo containing the client library and execute `mvn javadoc:javadoc` to generate the full and complete JavaDoc output for the code, without any need for additional processing steps.
~