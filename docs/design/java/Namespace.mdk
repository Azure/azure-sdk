### Namespaces {#general-namespace}

Java uses packages to group related types.  Grouping services within a cloud infrastructure is common since it aids discoverability and provides structure to the reference documentation.

In Java, the namespace should be named `com.azure.<group>.<service>[.<feature>]`.  All consumer-facing APIs that are commonly used should exist within this package structure.  Here:

- `<group>` is the group for the service (see the list above)
- `<service>` is the service name represented as a single word
- `<feature>` is an optional subpackage to break services into separate components (for example, storage may have `.blob`, `.files`, and `.queues`)

~ Must {#general-namespace-startswith}
start the package with "com.azure" to indicate an Azure client library.
~

~ Must {#java-consistent-package-naming}
construct the package name with all lowercase letters (no camel case is allowed), without spaces, hyphens, or underscores. For example, Azure Key Vault would be in `com.azure.<group>.keyvault` - note that the two words 'Key' and 'Vault' are brought together to `keyvault`, instead of `keyVault`, `key_vault`, or `key-vault`.  It may further be shortened if the shortened version is well known in the community.  For example, "Azure Media Analytics" would have a compressed service name of `mediaanalytics`, and "Azure Service Bus" would become `servicebus`.
~

~ Must {#general-namespace-serviceclient}
pick a package name that allows the consumer to tie the package to the service being used. The package does **NOT** change when the branding of the product changes.  Avoid the use of marketing names that may change.
~

~ Must {#general-namespace-names}
use the following list as the group of services:

| Namespace Group  | Functional Area                                        |
|:-----------------|:-------------------------------------------------------|
| `ai`             | Artificial intelligence, including machine learning    |
| `analytics`      | Gathering data for metrics or usage                    |
| `data`           | Dealing with structured data stores like databases     |
| `diagnostics`    | Gathering data for diagnosing issues                   |
| `identity`       | Authentication and authorization                       |
| `iot`            | Internet of things                                     |
| `management`     | Control Plane (Azure Resource Manager)                 |
| `media`          | Audio, video, or mixed reality                         |
| `messaging`      | Messaging services, like push notifications or pub-sub |
| `search`         | Search technologies                                    |
| `security`       | Security and cryptography                              |
| `storage`        | Storage of unstructured data                           |
~

~ Must {#general-namespace-split-management-api}
place the management (Azure Resource Manager) API in the "management" group.  Use the grouping `com.azure.management.<group>.<service>` for the package.  Since more services require control plane APIs than data plane APIs, other packages may be used explicitly for control plane only.  Data plane usage is by exception only.  Additional packages that can be used for control plane SDKs include:

| Namespace Group  | Functional Area                                          |
|:-----------------|:---------------------------------------------------------|
| `appmodel`       | Application models, such as Functions or App Frameworks  |
| `compute`        | Virtual machines, containers, and other compute services |
| `integration`    | Integration services (such as Logic Apps)                |
| `management`     | Management services (such as Cost Analytics)             |
| `networking`     | Services such as VPN, WAN, and Networking                |

Many `management` APIs don't have a data plane. It's reasonable to place the client library in the `com.azure.management` package. For example, use `com.azure.management.costanalysis`, not `com.azure.management.management.costanalysis`.
~

~ MustNot {#general-namespace-avoid-ambiguity}
choose similar names for clients that do different things.
~

~ Must {#general-namespace-register}
register the chosen namespace with [adparch](https://github.com/Azure/azure-sdk-pr/issues/new/choose).
~

Here are some examples of selections that meet the guidelines (from the Java world):

- `com.azure.data.cosmos`
- `com.azure.identity.activedirectory`
- `com.azure.iot.deviceprovisioning`
- `com.azure.storage.blob`
- `com.azure.messaging.notificationhubs` (the client library for Notification Hubs)
- `com.azure.management.messaging.notificationhubs` (the management client for Notification Hubs)

Here are some examples that don't meet the guidelines:

- `com.microsoft.azure.cosmosdb` (not in the `com.azure` namespace, no grouping)
- `com.azure.mixedreality.kinect` (invalid group)

If the client library doesn't seem to fit into the group list, or you feel your service requires a new group, contact [adparch](https://github.com/Azure/azure-sdk-pr/issues/new/choose).

~ MustNot {#java-do-not-leak-impl}
allow implementation code (that is, code that doesn't form part of the public API) to be mistaken as public API. There are two valid arrangements for implementation code:

1. Implementation classes can be placed within a subpackage named `implementation`.
2. Implementation classes can be made package-private and placed within the same package as the consuming class.

CheckStyle checks ensure that classes within an `implementation` package aren't exposed through public API.
~
