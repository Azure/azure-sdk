## Java tooling {#java-tooling}

The two primary tools used to ensure conformance and high quality are SpotBugs and CheckStyle. The Azure SDK build system adds custom checks to enforce compliance with this specification.

 Assuming the client library exists in the [azure/azure-sdk-for-java](https://github.com/azure/azure-sdk-for-java) mono-repo, there are two commands to execute from the root directory that will generate these reports:

1. To install tooling (and generate the SpotBugs report): `mvn install -Dinclude-non-shipping-modules -DskipTests -Dgpg.skip -f pom.client.xml`
2. To run all other reports: `mvn site:site site:stage -DskipTests -Dgpg.skip -f pom.client.xml`

Once these two commands are executed, the generated reports are available in the following locations:

| Tool       | Output Location                                                   |
|------------|-------------------------------------------------------------------|
| SpotBugs   | `/eng/spotbugs-aggregate-report/target/spotbugs/spotbugsXml.html` |
| CheckStyle | `/target/staging/checkstyle-aggregate.html`                       |
| JavaDoc    | `/target/staging/apidocs/index.html`                              |
| Maven Site | `/target/staging/index.html`                                      |
| JaCoCo     | `/eng/jacoco-test-coverage/target/site/test-coverage/index.html`  |

### SpotBugs

~ Must {#java-tooling-code-linter}
run SpotBugs using the Azure Java SDK SpotBugs rule set.  Ensure no failures are reported.
~

~ MustNot {#java-tooling-code-linter-test-no-commit-on-failure}
push code to the [azure/azure-sdk-for-java](https://github.com/azure/azure-sdk-for-java) mono-repo that breaks SpotBugs.

The Azure SDK build fails if any SpotBugs issue is found.
~

### CheckStyle

~ Must {#java-tooling-code-style}
run CheckStyle, in a similar fashion to SpotBugs above. There must be no failures.
~

### JaCoCo

 [JaCoCo](https://www.eclemma.org/jacoco/) generates HTML reports for how much code our unit tests cover.

~ Must {#java-test-coverage}
run [JaCoCo](https://www.eclemma.org/jacoco/) to ensure that code test coverage is satisfactory.
~
