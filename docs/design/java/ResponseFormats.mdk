### Response formats {#general-responses}

Requests to the service fall into two basic groups: methods that make a single logical request, and methods that make a deterministic sequence of requests.  An example of a *single logical request* is a request that may be retried inside the operation.  An example of a *deterministic sequence of requests* is a paged operation.

The *logical entity* is a protocol neutral representation of a response. The logical entity may combine data from headers, body, and the status line. For example, you may expose an `ETag` header as a property on the logical entity.  `Response<T>` is the 'complete response'. It contains HTTP headers, status code, and the `T` object (a deserialized object created from the response body). The `T` object would be the 'logical entity'.

~ Must {#general-return-logical-entities}
return the logical entity for the normal form of a service method. The logical entity MUST represent the information needed in the 99%+ case.
~

~ Must {#general-return-expose-raw}
*make it possible* for a developer to access the complete response, including the status line, headers, and body.

Return `Response<T>` on the maximal overload for a service method with `WithResponse` appended to the name.  For example:

```java
Foo foo = client.getFoo(a);
Foo foo = client.getFoo(a, b);
Foo foo = client.getFoo(a, b, c, context); // This is the maximal overload
Response<Foo> response = client.getFooWithResponse(a, b, c, context);
```
~

~ Must {#general-return-document-raw-stream}
provide examples on how to access the raw and streamed response for a request, where exposed by the client library.  We don't expect all methods to expose a streamed response.
~

~ Must {#general-return-pageable-iterate-items}
provide a Java-idiomatic way to enumerate all logical entities for a paged operation, automatically fetching new pages as needed. For example:

```java
// Yes:
client.listSettings().forEach(this::print);

// No - don't force the caller of the library to do paging:
String nextPage = null;
while (!done) {
    Page<ConfigurationSetting> pageOfSettings = client.listSettings(nextPage);
    for (ConfigurationSetting setting : pageOfSettings) {
        print(setting);
    }
    nextPage = pageOfSettings.getNextPage();
    done = nextPage == null;
}
```

Refer to the [pagination section](#java-pagination) for details on what to return for all `list` operations.
~

For methods that combine multiple requests into a single call:

~ MustNot {#general-return-no-headers-if-confusing}
return headers and other per-request metadata unless it's obvious as to which specific HTTP request the methods return value corresponds to.
~

~ Must {#general-expose-data-for-composite-failures}
provide enough information in failure cases for an application to take appropriate corrective action.
~

~ ShouldNot {#general-dont-use-value}
use reserved words (such as `object` and `value`) as a property name within the logical entity.  Avoid reserved words in other supported languages.
~
