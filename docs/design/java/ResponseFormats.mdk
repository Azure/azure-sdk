### Response formats {#general-responses}

~ Draft
At present the Java spec is to have all API return a "fat" `Response<T>` value. This may change before final releases of client libraries are made. The spec below is non-final.
~

Requests to the service fall into two basic groups - methods that make a single logical request, or a deterministic sequence of requests.  An example of a *single logical request* is a request that may be retried inside the operation.  An example of a *deterministic sequence of requests* is a paged operation.

The *logical entity* is a protocol neutral representation of a response. For HTTP, the logical entity may combine data from headers, body and the status line. A common example is exposing an ETag header as a property on the logical entity in addition to any deserialized content from the body.

In the case of Java, the approach taken is to talk about `Response<T>` as the 'complete response', as it contains the response information such as HTTP headers, status code, as well as the `T` object, a deserialized object created from the response body. This `T` object would be the 'logical entity'.

~ Must {#general-return-logical-entities}
optimize for returning the logical entity for a given request. The logical entity MUST represent the information needed in the 99%+ case.
~

~ Must {#general-return-expose-raw}
*make it possible* for a developer to get access to the complete response, including the status line, headers and body.
~

~ Must {#general-return-document-raw-stream}
document and provide examples on how to access the raw and streamed response for a given request, where exposed by the client library.  We do not expect all methods to expose a streamed response.
~

~ Must {#general-return-pageable-iterate-items}
provide a Java-idiomatic way to enumerate all logical entities for a paged operation, automatically fetching new pages as needed. For example:

```java
// Yes:
client.listSettings().forEach(this::print);

// No - don't force the caller of the library to do paging:
String nextPage = null;
while (!done) {
    Page<ConfigurationSetting> pageOfSettings = client.listSettings(nextPage);
    for (ConfigurationSetting setting : pageOfSettings) {
        print(setting);
    }
    nextPage = pageOfSettings.getNextPage();
    done = nextPage == null;
}
```

Refer to the [pagination section](#java-pagination) for details on what to return for all `list` operations.
~

For methods that combine multiple requests into a single call:

~ MustNot {#general-return-no-headers-if-confusing}
return headers and other per-request metadata unless it is obvious as to which specific HTTP request the methods return value corresponds to.
~

~ Must {#general-expose-data-for-composite-failures}
provide enough information in failure cases for an application to take appropriate corrective action.
~

~ ShouldNot {#general-dont-use-value}
use the following as a property name within the models returned within the logical entity.

- `object`
- `value`

Such usage can cause confusion and will inevitably have to be changed on a per-language basis, which can cause consistency problems.
~