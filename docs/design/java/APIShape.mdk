### Client interface {#general-apisurface-serviceclient}

In general, your API surface will consist of one or more _service clients_ that the consumer will instantiate to connect to your service, plus a set of supporting types.     

~ Must {#general-apisurface-serviceclientnaming}
name service client types with the _Client_ suffix.
~

~ Must {#general-apisurface-serviceclientnamespace}
place service client types that the consumer is most likely to interact with in the root package of the client library (e.g. `com.azure.<group>.servicebus`).  Specialized service clients may be placed in sub-packages.
~

~ Must {#general-apisurface-serviceclientconstructor}
allow the consumer to construct a service client with the minimal information needed to connect and authenticate to the service.
~

~ Must {#general-apisurface-standardized-verbs}
standardize verb prefixes within a set of client libraries for a service.  The service must be able to speak about a specific operation in a cross-language manner within outbound materials (such as documentation, blogs, and public speaking).  They cannot do this if the same operation is referred to by different verbs in different languages.
~

~ Must {#general-apisurface-supportallfeatures}
support 100% of the features provided by the Azure service the client library represents. Gaps in functionality cause confusion and frustration among developers.
~

### Network requests

Since the client library generally wraps one or more HTTP requests, it is important to support standard network capabilities.  Asynchronous programming techniques are not widely understood, although such techniques are essential in developing scalable web services and required in certain environments (such as mobile or Node environments).  Many developers prefer synchronous method calls for their easy semantics when learning how to use a technology.  In addition, consumers have come to expect certain capabilities in a network stack - capabilities such as call cancellation, automatic retry, and logging. 

~ Must {#general-apisurface-syncandasync}
support both synchronous and asynchronous service clients.
~

~ Must {#general-apisurface-identifyasync}
ensure that the consumer can identify which methods are asynchronous and which are synchronous. In Java this is achieved by having [separate service clients](#java-api-shape) for sync and async APIs.
~

### Authentication

Azure services use a variety of different authentication schemes to allow clients to access the service.  Conceptually, there are two entities responsible in this process: a credential and an authentication policy.  Credentials provide confidential authentication data.  Authentication policies use the data provided by a credential to authenticate requests to the service.  

~ Must {#general-apisurface-support-all-auth-techniques}
support all authentication techniques that the service supports.
~

~ Must {#general-apisurface-use-azure-core}
use credential and authentication policy implementations from the Azure Core library where available.
~

~ Must {#general-apisurface-prefer-token-auth}
provide credential types that can be used to fetch all data needed to authenticate a request to the service in a non-blocking atomic manner for each authentication scheme that does not have an implementation in Azure Core.
~

~ Must {#general-apisurface-auth-in-constructors}
provide service client fluent builder APIs that accept all supported authentication credentials.
~

Client libraries may support providing credential data via a connection string __ONLY IF__ the service provides a connection string to users via the portal or other tooling.   Connection strings are generally good for getting started as they are easily integrated into an application by copy/paste from the portal.  However, connection strings are considered a lesser form of authentication because the credentials cannot be rotated within a running process.

~ MustNot {#general-apisurface-no-connection-strings}
support constructing a service client with a connection string unless such connection string is available within tooling (for copy/paste operations).
~
