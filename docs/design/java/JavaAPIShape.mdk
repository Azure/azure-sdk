## Java API specifics {#java-api-shape}

### Async API

~ Must {#java-async-client}
offer an async service client named `<ServiceName>AsyncClient`. More than one service client may be offered for a single service.
~

~ Must {#java-async-use-project-reactor}
use [Project Reactor](http://projectreactor.io) to provide consumers with a high-quality async API.
~

~ MustNot {#java-async-no-other-libs}
use any other async APIs, such as `CompletableFuture` and [RxJava](https://github.com/ReactiveX/RxJava).
~

~ MustNot {#java-no-async-naming-pattern}
use the suffix `Async` in methods that do operations asynchronously. Let the fact the user has an instance of an 'async client' provide this context.
~

~ MustNot {#java-async-no-overloads}
provide multiple asynchronous methods for a single REST endpoint, unless to provide overloaded methods to enable alternative or optional method parameters.
~

~ MustNot {#java-async-cancellations}
provide API that accepts a cancellation token. Cancellation isn't a common pattern in Java. Developers who need to cancel requests unsubscribe from a publisher to cancel the request.
~

~ MustNot {#java-async-no-custom-API}
write custom APIs for streaming or async operations. Make use of the existing functionality offered in the Azure core library. Discuss proposed changes to the Azure core library with the [Java architect](https://github.com/azure/azure-sdk/issues).
~

~ MustNot {#java-async-no-blocking}
include blocking calls inside async client library code. Use [BlockHound](https://github.com/reactor/BlockHound) to detect blocking calls in async APIs.
~

### Sync API

~ Must {#java-sync-client}
offer a sync service client named `<ServiceName>Client`. More than one service client may be offered for a single service.
~

~ MustNot {#java-sync-cancellations}
provide a sync API that accepts a cancellation token. Cancellation isn't a common pattern in Java.  Developers who need to cancel requests should use the async API instead.
~

### Service Clients

Consumers will use one or more _service clients_ to access Azure services, plus a set of model classes and other supporting types.

~ Must {#java-client-suffix}
name service client types with the _Client_ suffix (for example, `ConfigurationClient`).
~

~ Must {#java-client-annotate}
annotate all service clients with the `@ServiceClient` annotation.
~

~ Must {#java-client-root-package}
place service clients in the root package of their corresponding client library (for example, `com.azure.storage.blob.BlobClient`, as `com.azure.storage.blob` is considered the root package in this example).
~

~ Must {#java-client-immutable}
ensure that all service client classes are immutable upon instantiation.
~

~ MustNot {#java-client-no-ctor}
provide any `public` or `protected` constructors in the service client, except where necessary to support mock testing. Keep visibility to a minimum.
~

~ Must {#java-sync-client-structure}
follow the basic shape outlined below for all synchronous service clients:

```java
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

package com.azure.<group>.<service_name>;

@ServiceClient(
    builder = <service_name>ClientBuilder.class, 
    serviceInterfaces = <service_name>Service.class)
public final class <service_name>Client {

    // internally, sync API can defer to async API with sync-over-async
    private final <service_name>AsyncClient client;
    
    // package-private constructors only - all instantiation is done with builders
    <service_name>Client(<service_name>AsyncClient client) {
        this.client = client;
    }

    // service methods...

    // A single response API
    public Response<<model>> <service_operation>(<parameters>) {
        // deferring to async client internally
        return client.<service_operation>(<parameters>).block();
    }

    // A non-paginated sync list API (refer to pagination section for more details)
    public Stream<<model>> list<service_operation>(<parameters>) {
        // deferring to async client internally
        return client.list<service_operation>(<parameters>).toStream();
    }

    // other members
    â€¦
}
```

Refer to the [ConfigurationClient class](https://github.com/Azure/azure-sdk-for-java/blob/master/appconfiguration/client/src/main/java/com/azure/data/appconfiguration/ConfigurationClient.java) for a fully built-out example of how a sync client should be constructed.
~

~ Must {#java-async-client-structure}
follow the basic shape outlined below for all asynchronous service clients:

```java
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

package com.azure.<group>.<service_name>;

@ServiceClient(
    builder = <service_name>ClientBuilder.class, 
    serviceInterfaces = <service_name>Service.class,
    isAsync = true)
public final class <service_name>AsyncClient {
        
    // package-private constructors only - all instantiation is done with builders
    <service_name>Client(<parameters>, HttpPipeline pipeline) {
        super(pipeline);
    }

    // service methods...

    // A single response API
    public Mono<Response<<model>>> <service_operation>(<parameters>) {
        ...
    }

    // A paginated response API
    public PagedFlux<<model>> list<service_operation>(<parameters>) {
        ...
    }

    // other members
    ...
}
```

Refer to the [ConfigurationAsyncClient class](https://github.com/Azure/azure-sdk-for-java/blob/master/appconfiguration/client/src/main/java/com/azure/data/appconfiguration/ConfigurationAsyncClient.java) for a fully built-out example of how an async client should be constructed.
~

~ Must {#java-service-client-builder}
offer a fluent builder API for constructing service clients named `<service_name>ClientBuilder`, which must support building a sync service client instance and an async service client instance (where appropriate). It must offer `buildClient()` and `buildAsyncClient()` API to create a synchronous and asynchronous service client instance, respectively:

```java
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

package com.azure.<group>.<service_name>;

@ServiceClientBuilder(serviceClients = {<service_name>Client.class, <service_name>AsyncClient.class})
public final class <service_name>ClientBuilder {

    // private fields for all settable parameters
    ...

    // public constructor - this is the only available front door to creating a service client instance
    public <service_name>ClientBuilder() {
        builder = <service_name>AsyncClient.builder();
    }

    // The buildClient() method returns a new instance of the sync client each time it is called
    public <service_name>Client buildClient() {
        // create an async client and pass that into the sync client for sync-over-async impl
        return new <service_name>Client(buildAsync());
    }

    // The buildAsyncClient() method returns a new instance of the async client each time it is called
    public <service_name>Client buildAsyncClient() {
        // configuration of pipeline, etc
        ...

        // instantiate new async client instance
        return new <service_name>AsyncClient(serviceEndpoint, pipeline);
    }

    // fluent API, each returning 'this', and one for each parameter to configure
    public <service_name>ClientBuilder <property>(<parameter>) {
        builder.<property>(<parameter>);
        return this;
    }
}
```
~

~ Must {#java-build-annotate}
annotate service client builders with the `@ServiceClientBuilder` annotation.
~

~ Must {#java-builder-api-consistency}
ensure consistency across all client libraries, by using the following names for client builder fluent API:

| Name                 | Intent                                                                               |
|----------------------|--------------------------------------------------------------------------------------|
| `addPolicy`          | Adds a policy to the set of existing policies (assumes no custom pipeline is set).   |
| `buildAsyncClient`   | Creates a new **async** client on each call.                                         |
| `buildClient`        | Creates a new **sync** client on each call.                                          |
| `configuration`      | Sets the configuration store that is used during construction of the service client. |
| `credential`         | Sets the credential to use when authenticating HTTP requests.                        |
| `connectionString`   | Sets the connection string to use for.                                               |
| `endpoint`           | URL to send HTTP requests to.                                                        |
| `httpClient`         | Sets the HTTP client to use.                                                         |
| `httpLogDetailLevel` | Sets the logging level for HTTP requests and responses.                              |
| `pipeline`           | Sets the HTTP pipeline to use.                                                       |

`endpoint` may be renamed if a more user-friendly name can be justified. For example, a blob storage library developer may consider using `new BlobClientBuilder.blobUrl(..)`. In this case, the `endpoint` API should be removed.
~

~ Must {#java-builder-build-consistency}
use the following precedence rules for builder arguments:

1. If the user sets a non-null `pipeline`, all other settings related to construction and configuration of a pipeline are ignored. The provided pipeline is used as-is.
2. If the user sets a `connectionString` and a `credential`, the `credential` will take precedence and the `connectionString` must be ignored.

Supporting common precedence rules ensures consistency across client libraries.
~

~ Must {#java-builder-build-consistency-log}
throw an `IllegalStateException` from the builder method when it receives mutually exclusive arguments.  The consumer is over-specifying builder arguments, some of which will necessarily be ignored. The error message in the exception must clearly outline the issue.
~

~ Must {#java-build-async-validation}
ensure the builder will instantiate a service client into a valid state.  Throw validation exceptions during fluent property calls, or as part of the `build*()` calls.
~

~ MustNot {#general-apisurface-no-leaking-implementation}
leak the underlying protocol transport implementation details to the consumer.  All types from the protocol transport implementation must be appropriately abstracted.
~

~ Must {#java-naming-subclients}
prefix methods that create or vend subclients with `get` and suffix with `Client` or `AsyncClient` for sync and async subclients respectively (for example, `container.getBlobClient()` or `container.getBlobAsyncClient()`).
~

### Common Service Client Patterns

~ Must {#java-crud-naming}
prefer the use of the following terms for CRUD operations:

|Verb              |Parameters        |Returns                 |Comments                                                                                                                |
|------------------|------------------|------------------------|------------------------------------------------------------------------------------------------------------------------|
| `upsert<noun>`   |key, item         |Updated or created item |Create new item or update existing item. Verb is primarily used in database-like services.                              |
| `set<noun>`      |key, item         |Updated or created item |Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service.            |
| `create<noun>`   |key, item         |Created item            |Create new item. Fails if item already exists.                                                                          |
| `update<noun>`   |key, partial item |Updated item            |Fails if item doesn't exist.                                                                                            |
| `replace<noun>`  |key, item         |Replace existing item   |Completely replaces an existing item. Fails if the item doesn't exist.                                                  |
| `delete<noun>`   |key               |Deleted item, or `null` |Delete an existing item. Will succeed even if item didn't exist. Deleted item may be returned, if service supports it.  |
| `add<noun>`      |index, item       |Added item              |Add item to a collection. Item will be added last, or into the index position specified.                                |
| `get<noun>`      |key               |Item                    |Will return null if item doesn't exist.                                                                                |
| `list<noun>`     |                  |Items                   |Return list of items. Returns empty list if no items exist.                                                             |
| `<noun>Exists`   |key               |`boolean`               |Return `true` if the item exists.                                                                                       |
~

~ Should {#java-crud-naming-precedence}
remain flexible and use names best suited for developer experience.  Don't let the naming rules result in non-idiomatic naming patterns.  For example, Java developers prefer `list` operations over `getAll` operations.
~

~ Must {#java-service-method-context}
provide an overload method that takes a `com.azure.core.util.Context` argument for each service operation **in sync clients only**. The `Context` argument must be the last argument into the service method (except where `varargs` are used). If a service method has multiple overloads, only the 'maximal' overloads need to have the `Context` argument. A maximal overload is one that has a full set of arguments.  It may not be necessary to offer a 'Context overload' in all cases.  We prefer a minimal API surface, but `Context` must always be supported.

```java
getFoo()
getFoo(x)
getFoo(x, y)
getFoo(x, y, z) // maximal overload
getFoo(a)       // maximal overload

// this will result in the following two methods being required:
getFoo(x, y, z, Context)
getFoo(a, Context)
```

Don't include overloads that take `Context`in async clients.  Async clients use the [subscriber context built into Reactor Flux and Mono APIs](https://projectreactor.io/docs/core/release/reference/#context).
~

### Model classes

Model classes are classes that consumers use to provide required information into client library methods. These classes typically represent the domain model, or options classes that must be configured before the request can be made.

~ Must {#java-model-class-use-ctor}
provide public constructors for all model classes.

Use a no-args constructor and a fluent setter API to configure the model class. However, other designs may be used for the constructor when appropriate.
~

~ MustNot {#java-model-class-no-builders}
offer a builder class for model classes.
~

~ Must {#java-model-class-fluent}
provide a fluent API where appropriate.

Apply the `@Fluent` annotation to the class. Name setter methods after the property being set (for example, `proxy(Proxy p)`).  All setter methods must return `this`.
~

~ Must {#java-model-class-not-immutable}
ensure that setter methods within a fluent type return the same instance of the type.

Fluent types must not be immutable.  Don't return a new instance on each setter call.
~

~ MustNot {#java-model-class-no-javabean}
use the JavaBean naming convention of `get*`, `set*`, and `is*`.
~

### Other support classes

Don't offer builder or fluent APIs for supporting classes such as custom exception types, HTTP policies, and credential types.

~ Must {#java-other-class-use-javabean}
use the JavaBean naming convention of `get*`, `set*`, and `is*`.
~

~ MustNot {#java-other-class-no-fluent}
use the fluent API naming convention outlined above for model classes.
~

~ MustNot {#java-other-class-no-builder}
provide a builder class.
~

### Annotations

A number of annotations are defined in the Azure core library. A few annotations enable runtime functionality.  Most of the annotations are used as part of the [Azure Java SDK code linting tools](#java-tooling).

~ Must {#java-use-core-annotations} 
use the Azure core library annotations outlined below in all applicable places. Use annotations eagerly as part of the initial code design.  The code linters will ensure continued conformance to some of the rules outlined in this specification.
~

~ MustNot {#java-annotation-no-string-spacing}
include spaces in annotation string values, unless the description below states it's allowed.
~

#### Service Interface

A service interface defines the REST endpoints for a service, but isn't part of the public API.  It's hidden behind the service client class. For example, here is the service interface for one method within the `ConfigurationService`:

```java
@Host("{url}")
@ServiceInterface("AppConfig")
interface ConfigurationService {
    @Get("kv/{key}")
    @ExpectedResponses({200})
    @UnexpectedResponseExceptionType(code = {404}, value = ResourceNotFoundException.class)
    @UnexpectedResponseExceptionType(HttpResponseException.class)
    Mono<Response<ConfigurationSetting>> getKeyValue(
            @HostParam("url") String url, @PathParam("key") String key, @QueryParam("label") String label,
            @QueryParam("$select") String fields, @HeaderParam("Accept-Datetime") String acceptDatetime,
            @HeaderParam("If-Match") String ifMatch, @HeaderParam("If-None-Match") String ifNoneMatch,
            Context context);
    ...
}
```

| Annotation | Location | Description |
+------------+----------+-------------+
| `@ServiceInterface` | Service Interface | This interface represents a REST endpoint for the service.  The argument will be used as the service name in policies (such as telemetry and tracing). The argument must be short, alphanumeric, without spaces, and fit for public consumption. |
| `@Host` | Service Interface | The host name of the REST service.  The `{url}` maps with the `@HostParam` annotation. |
| `@<Method>` | Service Method | The HTTP method and endpoint used for the HTTP request. |
| `@ExpectedResponses` | Service Method | The list of HTTP status codes that the method expects to receive on success. |
| `@UnexpectedResponseExceptionType` | Method | Enables different exceptions to be thrown based on the status code returned. |
| `@BodyParam` | Argument | Places this argument into the body of the outgoing HTTP request. |
| `@HeaderParam` | Argument | Places this argument into the header of the outgoing HTTP request. |
| `@PathParam` | Argument | Places the argument into the endpoint path. |
| `@QueryParam` | Argument | Places the argument into the query string of the outgoing HTTP request. |

When specifying strings, you may use `{argument}` to do string replacement from arguments.  For example, the `@PathParam("key")` annotation replaces the `{key}` segment in the method annotation in the above example.

#### Service Client

Include the following annotations on the service client class.  For example, this code sample shows a sample class demonstrating the use of these two annotations:

```java
@ServiceClient(builder = ConfigurationAsyncClientBuilder.class, isAsync = true, service = ConfigurationService.class)
public final class ConfigurationAsyncClient {

    @ServiceMethod
    public Mono<Response<ConfigurationSetting>> addSetting(String key, String value) { 
        ... 
    }
}    
```

| Annotation | Location | Description |
+------------+----------+-------------+
| `@ServiceClient` | Service Client | Specifies the builder responsible for instantiating the service client, whether the API is asynchronous, and a reference back to the service interface (the interface annotated with `@ServiceInterface`). |
| `@ServiceMethod` | Service Method | Placed on all service client methods that do network operations. |

#### Service Client Builder

The `@ServiceClientBuilder` annotation should be placed on any class that is responsible for instantiating service clients (that is, instantiating classes annotated with `@ServiceClient`). For example:

```java
@ServiceClientBuilder(serviceClients = {ConfigurationClient.class, ConfigurationAsyncClient.class})
public final class ConfigurationClientBuilder { ... }
```

This builder states that it can build instances of `ConfigurationClient` and `ConfigurationAsyncClient`.

#### Model Classes

There are two annotations of note that should be applied on model classes, when applicable:

* The `@Fluent` annotation is given to all model classes that are expected to provide a fluent API to end users.
* The `@Immutable` annotation is given to all immutable classes.

### Versioning {#java-service-versioning}

~ Draft
The API for specifying a specific service version isn't yet defined.  This section will change as it becomes more concrete.


There are two versions that developers must be concerned with. [Release versioning](#sec-versioning) is the version of the library and is discussed later in this document.  The Azure service API that the library calls also has a version. This section details how consumers can request a specific Azure service API when working with the library.

~ Must {#java-service-version-default}
call the latest supported service API version by default.
~

~ Must {#java-service-version-option}
allow the consumer to select a supported service API version when instantiating the service client.

Include `.serviceVersion(ServiceVersion version)` as part of the client builder API.  `ServiceVersion` should be an enumeration. The enumeration must have a `getLatest()` method that returns the latest service version. If a consumer doesn't specify a service version, the builder will call `ServiceVersion.getLatest()` to obtain the appropriate service version.
~

~
