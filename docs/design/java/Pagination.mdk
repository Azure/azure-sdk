[INCLUDE=../general/Pagination.mdk]
 
#### Java-specific guidelines {#java-pagination}

The synchronous API is intended for easier consumption.  It can offer fewer features than the async API to avoid complexity.

~ Must {#java-sync-pagination-api}
return `Stream<T>` for **synchronous** APIs (although exceptions can be requested for `Iterable<T>`, where more appropriate). Users won't receive any paging information.

For example, the configuration service sync client will offer API in the following form:

```java
public final class ConfigurationClient {
    // synchronous API returning a Stream of ConfigurationSetting instances
    public Stream<ConfigurationSetting> listSettings(...) {
        ...
    }
}
```
~

~ MustNot {#java-pagination-illegal-types}
use other collection types for sync APIs that return multiple values (for example, `List`, or `Iterator`).
~

~ Must {#java-async-pagination-api}
return `PagedFlux<T>` for **asynchronous** APIs if the service offers paging.  If the service doesn't offer paging, then return `Flux<T>`.

```java
public final class ConfigurationAsyncClient {

    // asynchronous API returning a PagedFlux of ConfigurationSetting instances
    public PagedFlux<ConfigurationSetting> listSettings(SettingSelector options, Context context) {
        // The first lambda is a Supplier<PagedResponse<T>> returning the first page of results 
        // as a Mono<PagedResponse<T>>.
        // The second lambda is a Function<String, Mono<PagedResponse<T>>>, returning a 
        // Mono<PagedResponse<T>> representing a page based on the provided continuationToken.
        return new PagedFlux<>(
            () -> listFirstPageSettings(options, context),
            continuationToken -> listNextPageSettings(contextWithSpanName, continuationToken));
    }
}
```

Consumers of this API can consume individual items by treating the response as a `Flux<T>`:

```java
client.listSettings(..)
      .subscribe(item -> System.out.println("Processing item " + item));
```

The consumer may process items page-by-page instead:

```java
client.listSettings(..)
      .byPage()
      .subscribe(page -> {
        // page is a PagedResponse, which implements Page and Response, so there exists: 
        //  * List<T> of items,
        //  * continuationToken (represented as a String),
        //  * Status code,
        //  * HTTP headers,
        //  * HTTP request
        System.out.println("Processing page " + page)
});
```

The `PagedFlux.byPage()` offers an overload to accept a `continuationToken` string, which will begin the returned Flux at the page specified by this token.
~