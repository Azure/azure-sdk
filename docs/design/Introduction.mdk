# Introduction

## Design Principles

The Azure SDK should be designed to enhance the productivity of developers connecting to Azure for services.  Other qualities (such as completeness, extensibility, and performance) are important by secondary.

We believe productivity is more easily achieved by adhering to the principles described below:

### Idiomatic

* The SDK should follow the general design guidelines and conventions for the target language.  It should feel natural to a developer in the target language.
* We are not trying to fix bad parts of the language ecosystem; we embrace the ecosystem with its strengths and its flaws.

### Consistent

* The developer should be able to learn core Azure concepts once, then apply those learnings to all target languages.
* All differences must have a good (articulated) reason for existing, rooted in idiomatic usage rather than whim.
* The combined set of SDKs across all languages feels like a single product developed by a single team.
* There should be feature parity across target languages.  This is more important than feature parity with the service.

### Approachable

* We are experts in the supported technologies so our customers, the developers, don't have to be.
* Learning a service should be natural with the SDK, with a great documentation set (hero tutorial, how to articles, samples, and API documentation).
* Getting off the ground should be easy through the use of predictable defaults that implement best practices.
* The SDK should be easily acquired through the most normal mechanisms in the target language and ecosystem.

### Diagnosable

* The developer should be able to understand what is going on.
* Logging, tracing, and exception handling are fundamental and should be thoughtful.
* Error messages should be concise, correlated with the service, and human readable.
* Integrating with the preferred debugger for the target language should be easy.

### Transparent

* It should be clear when and under what circumstances a network call is made.
* It is always clear what the defaults are and what their intent is.
* There is a well-documented error model when things fail, with correlation to the service.

### Compatible

* 99.99% of features and improvements are not worth the time customers would have to spend reacting to breaking changes.
* No dependencies that can force our hand on compatibility.

## Terminology

- **SDK**: Software Development Kit. This refers to the entire Azure SDK for a single language, itself broken up into numerous Azure SDK Components (as defined below).

- **Azure SDK Component**: An Azure SDK component (also referred to as 'SDK component', or simply 'component') represents the software (and associated tools, documentation, samples, etc.) that
exist to support a single Azure service. Each Azure SDK component is published separately to the appropriate language-specific locations. These releases are performed exclusively by the Azure SDK 
engineering systems team. Customers/Developers consume and use each component separately as necessary to solve their use case.

- **Client Library**. This refers to a library that customers/developers use to ease working with an Azure service. There is often one client library per service and per programming language. Sometimes a single client library will contain the ability to connect to multiple services. 

- **Package**. This refers to a client library after it has been packaged for distribution for customer-developers to consume. Examples are:
   - A Nuget package for a .NET client library
   - A Maven package for a Java library
   - An NPM package for a JavaScript library
   - A PiPI package for a Python library
   - A GitHub repositiory for a Go library (NOTE: Go is not a supported language yet)