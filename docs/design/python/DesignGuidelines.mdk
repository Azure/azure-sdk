## Supported Python versions {#python-scope; @h1-h2: decimal; }

~ Must {#python-version-support}
provide packages supporting Python 2.7 and Python 3.4+
~

## Supported Python interpreters

~ Must {#python-interpreters}
support PyPy and Jython in addition to CPython
~

## Supported Operating systems

~ ToDo
fill in
~

## Coding
### General

~ Must {#python-zen}
adhere to the [Zen of Python](https://www.python.org/dev/peps/pep-0020/)

  ```
  Beautiful is better than ugly.
  Explicit is better than implicit.
  Simple is better than complex.
  Complex is better than complicated.
  Flat is better than nested.
  Sparse is better than dense.
  Readability counts.
  Special cases aren't special enough to break the rules.
  Although practicality beats purity.
  Errors should never pass silently.
  Unless explicitly silenced.
  In the face of ambiguity, refuse the temptation to guess.
  There should be one-- and preferably only one --obvious way to do it.
  Although that way may not be obvious at first unless you're Dutch.
  Now is better than never.
  Although never is often better than *right* now.
  If the implementation is hard to explain, it's a bad idea.
  If the implementation is easy to explain, it may be a good idea.
  Namespaces are one honking great idea -- let's do more of those!
  ```
~

~ Must {#python-guidelines}
follow the general guidelines in [PEP8](https://www.python.org/dev/peps/pep-0008/t) unless explicitly overridden in this document.
~

~ MustNot {#python-no-borrowing}
"borrow" coding paradigms from other languages.

  *For example, regardless of how common Reactive programming is in the Java community, it is still unfamiliar for most Python devalepers.*
~

~ Must {#python-consistency}
favor consistency with other Python components over other libraries for the same service

  *It is significantly more likely that a developer will use many different libraries using the same languages than that a developer will use the same service from many different languages*
~

~ Must {#python-single-underscore}
use a single underscore to indicate that a name is not part of the public API and is not guaranteed stable.
~

~ MustNot {#python-no-leading-underscore}
use leading double underscore prefixed method names unless name clashes in inheritence hierarchy are likely. This is rare. 
~

~ Must {#python-structural-subtyping}
prefer structural subtyping and protocols over explicit type checks.
~

~ Must {#python-derive-appropriately}
derive from the abstract collections base classes `collections.abc` (or `collections` for Python 2.7) when appropriate.
~

~ Must {#python-type-hints}
provide type hints [PEP484](https://www.python.org/dev/peps/pep-0484/) wherever you are providing class or function documentation.

  - See the [suggested syntax for Python2.7 and straddling code](https://www.python.org/dev/peps/pep-0484/#suggested-syntax-for-python-2-7-and-straddling-code) for guidance for Python 2.7 compatible code. 
~

### Naming

~ Must {#python-snake-case}
use snake_case for variables and method names
  ```python
  # Yes:
  service_client = ServiceClient()

  # No:
  serviceClient = ServiceClient()
  ```
~

~ Must {#python-pascal-case}
use Pascal case for Types

  ```python
  # Yes:
  class ThisIsCorrect(object):
      pass


  # No:
  class this_is_not_correct(object):
      pass


  # No:
  class camelCasedTypeName(object):
      pass
  ```
~

~ Must {#python-parameter-name}
specify the parameter name when calling methods with more than two required positional parameters

  ```python
  def foo(a, b, c):
      pass


  def bar(d, e):
      pass


  # Yes:
  foo(a=1, b=2, c=3)
  bar(1, 2)
  bar(e=3, d=4)

  # No:
  foo(1, 2, 3)
  ```
~

~ Must {#python-keyword-args}
use keyword-only arguments for modules that only need to support Python 3.

  ```python
  # Yes
  def foo(a, *, b=1, c=None):
      ...
  ```
~

~ Must {#python-parameter-name}
specify the parameter name for optional parameters when calling functions

  ```python
  def foo(a, b=1, c=None):
      pass


  # Yes:
  foo(1, b=2, c=3)

  # No:
  foo(1, 2, 3)
  ```
~

### Shared functionality

~ Must {#python-client-suffix}
use the suffix "Client" for types accessing the service (Ex. CosmosClient)
~

~ Must {#python-use-base-classes}
use the base classes in [msrest](https://github.com/azure/msrest-for-python) whenever possible:

  |Type|Usage|
  |-|-|
  |`msrest.SDKClient`|Service specific client.|
  |`msrest.configuration.Configuration`|Pass configuration information to `msres.SDKClient` derived classes.
  |`msrest.authentication.Authentication`|Make use an existing class of or derive from in order to provide support for additional authentication schemes.|
  |`msrest.serialization.Model`|Base class for models returned by service methods.
  |`msrest.paging.Paged`|Base class for return values for service methods that return lists of object. Also supports server driven paging|
  |`msrest.polling.PollingMethod`|Base class for return values for service methods that are long running.|
~

~ Must {#python-pipeline-policies}
provide pipeline policies for shared behavior
~

~ Todo
Provide common policies in previous statement
~

### Common service patterns

~ Must {#python-auto-poll}
provide a way to automatically poll on long running operations
~

~ Must {#python-manual-poll}
provide a way to manually poll on long running operations by returning an operations object

  *A pattern of starting operation in process 1, handing off the info needed to poll to process 2 is a relatively common pattern in distributed computing.*
~

~ Must {#python-pickled}
make sure that operations objects can be [pickled](https://docs.python.org/3.7/library/pickle.html).
~

~ Must {#python-crud-naming}
prefer the use of the following terms for CRUD operations:

|Verb|Parameters|Returns|Comments|
|-|-|-|-|
| upsert_\<noun>|key, item|Updated or created item|Create new item or update existing item. Verb is primarily used in database-like services |
| set_\<noun>|key, item|Updated or created item|Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service |
| create_\<noun>|key, item|Created item|Create new item. Fails if item already exists. |
| update_\<noun>|key, partial item|Updated item|Fails if item does not exist. |
| replace_\<noun>|key, item|Replace existing item|Completely replaces an existing item. Fails if the item does not exist. |
| delete_\<noun>|key|None|Delete an existing item. Will succeed even if item did not exist. |
| append_\<noun>|item|Appended item|Add item to a collection. Item will be added last. |
| add_\<noun>|index, item|Added item|Add item to a collection. Item will be added last. |
| remove_\<noun>|key|None or removed item|Remove item from a collection. |
| get_\<noun>|key|Item|Will return None if item does not exist |
| list_\<noun>||`msrest.Pageable[Item]`|Return list of items. Returns empty list if no items exist |
| \<noun>\_exists|key|`bool`|Return True if the item exists. |
~

~ Must {#python-long-op-naming}
prefer the use of the following terms for long running operations:

  - `begin_<verb>_<noun>` for methods returning an operation object
~

~ Must {#python-iterators}
provide iterators over paged results which handle subsequent calls transparently. 

*`msrest.paging.Paged` is the preferred base class to provide this functionality.*
~

### Namespaces

~ Must {#python-azure-namespace}
add your code to the 'azure' namespace.
~

~ Must {#python-aio-suffix}
add use the .aio suffix to the namespace for  clients.
~

~ Todo
[See packaging guidelines for more related guidance]
~

### Exceptions

~ Must {#python-common-exceptions}
provide a common exception base class deriving from:
~

~ Todo
common exception types for previous statement
~

~ Must {#python-exceptions}
prefer different derived exception types over only differentiating between types of errors using an exception code
~

### Threads

~ Must {#python-thread-affinity}
maintain thread affinity for user-provided code unless explicitly documented to not do so.
~

~ ToDo
We need to provide more specific guidance for the use of threads in SDKs. This includes scenarios with native callback libraries as well as parallell workloads.
~

## Dependencies

~ Must {#python-dependencies}
consider using the following packages for shared functionality:

  - msrest
  - requests (synchronous HTTP)
  - aiohttp (asynchronous HTTP)
~

~ Todo
Fill in more dependencies above
~

~ MustNot {#python-no-ext-deps}
use external dependencies outside the list of "well known dependencies". To get a new dependency added, contact @adparch. 
~

~ Todo
how to specify?
~

~ MustNot {#python-no-vendor-deps}
vendor dependencies unless approved by @adparch

*Vendoring dependencies in Python means including the source from another package as if it was part of your package*
~

## Packaging

~ Must {#python-wheels}
provide wheels for all supported Python versions and architectures
~

~ Must {#python-publish-pypi}
publish your packages to PyPI
~

~ Must {#python-package-naming}
name your package after the namespace of your main client class
~

~ Must {#python-lowercase-packages}
use all lowercase in your package name with a dash (-) as a separator.
~

~ MustNot {#python-no-underscore-or-period}
use underscore (_) or period (.) in your package name. 
~

~ Must {#python-semver}
use semantic versioning for your package
~

~ Must {#python-follow-packaging-guidance}
follow the specific package guidance from packaging.md
~

~ Todo
Consolidate packaging wiki, python notes and this document
~

~ Must {#python-use-pkgutil}
use pkgutil style namespace packages
~

~ Must {#python-use-azure-nspkg}
depend on azure-nspkg for Python 2.x
~

~ Must {#python-follow-pep420}
follow PEP420 for Python 3.0
~

~ Must {#python-include-init}
include __init__.py for the namespace(s) in sdists
~

### Binary extensions

~ Must {#python-support-operating-systems}
be approved by @adparch
~

~ Must {#python-support-operating-systems}
support Windows, Linux (manylinux - see PEP513), macOS
~

~ Must {#python-support-platforms}
support x86, x64
~

~ Must {#python-support-unicode-ascii}
support unicode and ascii versions of CPython 2.7
~

## Async support

~ Must {#python-sync-and-async}
consider providing both sync and async versions of your APIs
~

~ Must {#python-use-async-await}
use the async/await keywords (requires Python 3.5+)
~

~ MustNot {#python-no-yield}
use the [yield from coroutine/@asyncio.coroutine](https://docs.python.org/3.4/library/asyncio-task.html) syntax in order to support Python 3.4.
~

~ Must {#python-async-package}
consider shipping a separate package for async support if the async version requires additional dependencies.
~

~ Must {#python-async-namespace}
use the same namespace as the synchronous version of the package with .aio appended.
~

~ Must {#python-async-naming}
use the same name of the package as the synchronous version of the package with -aio appended.
~

~ Must {#python-use-same-client-async}
use the same client name for sync and async packages

Example:

|Sync/async|Namespace|Package name|Client name|
|-|-|-|-|
|Sync|azure.sampleservice|azure-sampleservice|azure.sampleservice.SampleServiceClient|
|Async|azure.sampleservice.aio|azure-sampleservice-aio|azure.sampleservice.aio.SampleServiceClient|
~

~ Must {#python-use-aiohttp}
use aiohttp as the HTTP stack for async operations
~

~ Must {#python-support-other-async}
consider supporting async frameworks other than asyncio (i.e. Trio)
~

## Testing

~ Must {#python-use-pytest}
use pytest as the test framework
~

~ Must {#python-use-pytest-asyncio}
consider using pytest-asyncio for testing of async code. 
~

~ Must {#python-test-live-service}
make your scenario tests runnable against live services
~

~ Must {#python-test-recordings}
provide recordings to allow running tests offline/without an Azure subscription
~

~ Must {#python-simultanous-tests}
support multiple simultanous test runs in the same subscription
~

~ Must {#python-independent-tests}
make each test case independent of other tests
~

## Tooling

~ Must {#python-use-pylint}
use pylint for your code.
~

~ Todo 
Shared .pylintrc? Probably one per version of Python that is to be supported (e.g. unnescessary `object` inheritence should be avoided for Python3-only code, but is required for code straddling 2.7 and 3.x)
~

~ Must {#python-use-flake8}
use [flake8-docstrings](https://gitlab.com/pycqa/flake8-docstrings) to verify doccomments. 
~

~ Must {#python-use-black}
use Black for formatting your code.
~

~ Must {#python-use-mypy}
consider using MyPy to statically check your code
~

## Documenting your code

~ Must {#python-follow-pydocs}
follow the guidelines in https://aka.ms/pydocs unless explicitly overridden in this document.
~

~ Must {#python-docstring}
use the Azure docstring guidelines to document your code
~

~ Must {#python-code-snippets}
provide code snippets for each non-trivial method
~

~ Must {#python-document-exceptions}
document exceptions that may be raised
~

## Samples

~ Must {#python-samples}
provide samples showing real-world usage of the package

  - Error handling
~