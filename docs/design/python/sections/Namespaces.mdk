## Namespaces

~ Must {#python-azure-namespace}
implement your library as a subpackage in the `azure` namespace.
~

~ Must
pick a package name that allows the consumer to tie the namespace to the service being used. As a default, use the compressed service name at the end of the namespace. The namespace does NOT change when the branding of the product changes. Avoid the use of marketing names that may change.

A compressed service name is the service name without spaces. It may further be shortened if the shortened version is well known in the community. For example, “Azure Media Analytics” would have a compressed service name of `mediaanalytics`, and “Azure Service Bus” would become `servicebus`.  Separate words using an underscore if necessary. If used, `mediaanalytics` would become `media_analytics`
~

~ May
include a group name segment in your namespace (for example, `azure.<group>.<servicename>`) if your service or family of services have common behavior (for example, shared authentication types). If you want to use a group name segment, you **must** register the group name segment with [adparch](https://github.com/azure/azure-sdk/issues).
~

~ Must
place management (Azure Resource Manager) APIs in the `mgmt` group. Use the grouping `azure.mgmt.<servicename>` for the namespace. Since more services require control plane APIs than data plane APIs, other namespaces may be used explicitly for control plane only.
~

~ Must 
register the chosen namespace with [adparch](https://github.com/azure/azure-sdk/issues).
~

~ Must {#python-aio-suffix}
use an `.aio` suffix added to the namespace of the sync client for async clients.

Example:
```python
# Yes:
from azure.exampleservice.aio import ExampleServiceClient

# No: Wrong namespace, wrong client name...
from azure.exampleservice import AsyncExampleServiceClient
```
~
