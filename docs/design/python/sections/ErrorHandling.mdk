## Error handling

~ Must
raise an exception if a method fails to perform its intended functionality. Don't return `None` or a `boolean` to indicate errors.

```python
# Yes
try:
    resource = client.create_resource(name)
except azure.core.errors.ResourceExistsException:
    print('Failed - we need to fix this!')

# No
resource = client.create_resource(name):
if not resource:
    print('Failed - we need to fix this!')
```
~

~ MustNot
throw an exception for "normal responses".

Consider an `exists` method. The method **must** distinguish between the service returned a client error 404/NotFound and a failure to even make a request:

```python
# Yes
try:
    exists = client.resource_exists(name):
    if not resource:
        print("The resource doesn't exist...")
except azure.core.errors.ServiceRequestError:
    print("We don't know if the resource exists - so it was appropriate to throw an exception!")

# No
try:
    client.resource_exists(name)
except azure.core.errors.ResourceNotFoundException:
    print("The resource doesn't exist... but that shouldn't be an exceptional case for an 'exists' method")
```
~

~ ShouldNot
create a new exception type unless the developer can remediate the error by doing something different.  Specialized exception types should be based on existing exception types present in the `azure-core` package.
~

~ Must
produce an error when an HTTP request fails with an unsuccessful HTTP status code (as defined by the service).
~

~ Must
include the HTTP response (status code and headers) and originating request (URL, query parameters, and headers) in the exception.  

For higher-level methods that use multiple HTTP requests, either the last exception or an aggregate exception of all failures should be produced.
~

~ Must
include any service-specific error information in the exception.  Service-specific error information must be available in service-specific properties or fields.
~

~ Must
document the errors that are produced by each method.

Don't document commonly thrown errors that wouldn't normally be documented in Python.
~

~ MustNot
create new exception types when a [built-in exception type](https://docs.python.org/3/library/exceptions.html) will suffice.
~

~ Must
allow exception chaining to include the original source of the error.

```python
# Yes:
try:
    # do something
except:
    raise MyOwnErrorWithNoContext()

# No:
success = True
try:
    # do something
except:
    success = False
if not success:
    raise MyOwnErrorWithNoContext()

# No:
success = True
try:
    # do something
except:
    raise MyOwnErrorWithNoContext() from None
```
~

