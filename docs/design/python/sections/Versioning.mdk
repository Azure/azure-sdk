
## Versioning

~ Must
use [semantic versioning](https://semver.org) for your package. 
~

~ Must
use the `bN` pre-release segment for [preview releases](https://www.python.org/dev/peps/pep-0440/#pre-releases). 

Don't use pre-release segments other than the ones defined in [PEP440](https://www.python.org/dev/peps/pep-0440) (`aN`, `bN`, `rcN`). Build tools, publication tools, and index servers may not sort the versions correctly.
~

~ Must
change the version number if *anything* changes in the library.
~

~ Must
increment the patch version if only bug fixes are added to the package.
~

~ Must
increment the minor version if any new functionality is added to the package.
~

~ Must
increment the minor version if the default REST API version is changed, even if there's no public API change to the library.
~

~ MustNot
increment the major version for a new REST API version unless it requires breaking API changes in the python library itself.
~

~ Must
increment the major version if there are breaking changes in the package. Breaking changes require prior approval from [adparch](https://github.com/azure/azure-sdk/issues).

The bar to make a breaking change is extremely high for GA client libraries.  We may create a new package with a different name to avoid diamond dependency issues.
~

### REST API method versioning

~ Must
use the latest service protocol version when making requests.
~

~ Must
allow a client application to specify an earlier version of the service protocol.
~
