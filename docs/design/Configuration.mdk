## Configuration {#general-configuration}

The Azure SDK can be configured by a variety of sources, some of which are necessarily language-dependent:

1. System settings
2. Environment variables
3. Global configuration store (code)
4. Runtime parameters

~ Must
apply configuration in the order above by default, such that subsequent items in the list override settings from previous items in the list.
~

~ May
support configuration systems that users opt in to that do not follow the above ordering. 
~

~ Must
be consistent with naming between environment variables and configuration keys.
~

~ Must
log when a configuration setting is found somewhere in the environment or global configuration store
~

~ May
ignore configuration settings that are irrelevant for your client library.
~

### System Settings

~ Should
respect system settings for proxies.
~

### Environment variables

#### Well-known Environment Variables

~ Must
load relevant configuration settings from the environment variables listed in Table [#general-configuration-envvars].
~

[INCLUDE=../EnvironmentVariables.mdk]

~ Must
prefix Azure-specific environment variables with `AZURE_`.
~

~ Must
support CIDR notation for NO_PROXY
~

#### Client-library Specific Environment Variables

~ May
use client-libary-specific environment variables for portal-configured settings which are provided as parameters to your SDK. This generally includes credentials and connection details. For example, Service Bus could support the following environment variables:

* AZURE_SERVICEBUS_CONNECTION_STRING
* AZURE_SERVICEBUS_NAMESPACE
* AZURE_SERVICEBUS_ISSUER
* AZURE_SERVICEBUS_ACCESS_KEY

Storage could support:

* AZURE_STORAGE_ACCOUNT
* AZURE_STORAGE_ACCESS_KEY
* AZURE_STORAGE_DNS_SUFFIX
* AZURE_STORAGE_CONNECTION_STRING
~

~ Must
get approval for every new environment variable. 
~

~ Must
use this syntax for environment variables specific to a particular Azure service:

`AZURE_<ServiceName>_<ConfigurationKey>`

ServiceName is the canonical shortname without spaces (see note below).

ConfigurationKey refers to an un-nested configuration key for that library.
~

~ MustNot
use non-alpha-numeric characters in your environment variable names with the exception of underscore. This ensures broad interoperability.
~

### Global Configuration

Global configuration refers to configuration settings that are applied to all applicable client constructors in some manner. 

~ Must
support global configuration of shared pipeline policies including:

* Logging: Log level, swapping out logger implementation
* HTTP: Proxy settings, max retries, timeout, swapping out Agent implementation
* Telemetry: enabled/disabled
* Tracing: enabled/disabled
~

~ Must
provide configuration keys for setting or overriding every configuration setting inherited from the system or environment variables.
~

### Client Configuration

~ Must
use relevant global configuration settings either by default or when explicitly requested to by the user e.g. by passing in a configuration object to a client constructor.
~

~ Must
allow different clients of the same type to use different configurations.
~

~ Must
allow consumers of service clients to opt out of all global configuration settings at once, both via global "off switch" and a per-client opt-out.
~

~ Must
allow all global configuration settings to be overridden by client-provided options. The names of these options should align with any user-facing global configuration keys.
~

~ MustNot
change behavior based on configuration changes that occur after the client is constructed. Hierarchies of clients inherit parent client configuration unless explicitly changed or overridden. Exceptions to this requirement are as follows:

1. Log level, which must take effect immediately across the SDK.
2. Tracing on/off, which must take effect immediately across the SDK.
~