## Pagination {#general-pagination}

These guidelines eschew low-level pagination APIs in favor of high-level abstractions. High-level APIs are easy for developers to use for the majority use case but can be more confusing when finer grained control is required (e.g. over quota/throttling) and debugging when things go wrong. Other guidelines in this document work to mitigate this limitation e.g. by providing robust logging, tracing, and pipeline customization options.

~ Must {#general-pagination-must-use-iterators}
expose paginated collections using language-canonical iterators over items within pages. The APIs used to expose the async iterators are language-dependent but should align with any existing common practices in your ecosystem.
~

~ Must {#general-pagination-must-use-iterators}
expose paginated collections using an iterator or cursor pattern if async iterators aren't a built-in feature of your language.
~

~ Must {#general-pagination-paginate-lists}
expose non-paginated list endpoints identically to paginated list endpoints. Users shouldn't need to appreciate the difference.
~

~ Must {#general-pagination-distinct-types}
use distinct types for entities in a list endpoint and an entity returned from a get endpoint if these are different types, and otherwise you must use the same types in these situations.
~

~ Note
Services should refrain having a difference between the type of a particular entity as it exists in a list versus the result of a GET request for that individual item as it makes the client library's surface area simpler.
~

~ MustNot {#general-pagination-no-item-iterators}
expose an iterator over each individual item if getting each item requires a corresponding GET request to the service. One GET per item is often too expensive and so not an action we want to take on behalf of users.
~

~ MustNot {#general-pagination-support-toArray}
expose an API to get a paginated collection into an array. This is a dangerous capability for services which may return many many pages.
~

The following restrictions may be lifted in the future based on user feedback and experience in the field. Projects which want to expose such APIs should reach out to the Arch board for approval.

~ MustNot {#general-pagination-no-page-iterators}
expose an iterator over pages (i.e. an async iterator over `Response<Page<T>>`). Services which have a use case for this iterator should reach out to the Arch board for approval.
~

~ MustNot {#general-pagination-low-level-APIs}
expose low-level APIs to interact with the paged endpoint directly. These low-level APIs provide more fine-grained control over the pagination process while also providing users without access to (or understanding of) async iterators to use your library.
~