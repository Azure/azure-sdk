### Response formats {#general-responses}

Requests to the service fall into two basic groups - methods that make a single logical request, or a deterministic sequence of requests.  An example of a *single logical request* is a request that may be retried inside the operation.  An example of a *deterministic sequence of requests* is a paged operation.

The *logical entity* is a protocol neutral representation of a response. For HTTP, the logical entity may combine data from headers, body and the status line. A common example is exposing an ETag header as a property on the logical entity in addition to any deserialized content from the body.

~ Must {#general-return-logical-entities}
optimize for returning the logical entity for a given request. The logical entity MUST represent the information needed in the 99%+ case.
~

~ Must {#general-return-expose-raw}
*make it possible* for a developer to get access to the complete response, including the status line, headers and body. The client library MUST follow the language specific guidance for accomplishing this.
~

~ Must {#general-return-document-raw-stream}
document and provide examples on how to access the raw and streamed response for a given request, where exposed by the client library.  We do not expect all methods to expose a streamed response.
~

~ Must {#general-return-pageable-iterate-items}
provide a language idiomatic way to enumerate all logical entities for a paged operation, automatically fetching new pages as needed.  For example, in Python:

```python
# Yes:
for instance in client.list_instances():
    print(instance)

# No - don't force the caller of the library to do paging:
next_page = None
while not done:
    list_instance_result = client.list_instances(page=next_page):
    for instance ln list_instance_result.response():
        print(instance)
    next_page = list_instance_result.next_page
    done = next_page is None
```
~

For methods that combine multiple requests into a single call:

~ MustNot {#general-return-no-headers-if-confusing}
return headers and other per-request metadata unless it is obvious as to which specific HTTP request the methods return value corresponds to.
~

~ Must {#general-expose-data-for-composite-failures}
provide enough information in failure cases for an application to take appropriate corrective action.
~

~ ShouldNot {#general-dont-use-value}
use the following as a property name within the models returned within the logical entity.

- `object`
- `value`

Such usage can cause confusion and will inevitably have to be changed on a per-language basis, which can cause consistency problems.
~
