## Namespaces {#general-namespace}

Some languages have a concept of namespaces to group related types.  Grouping services within a cloud infrastructure is common since it aids discoverability and provides structure to the reference documentation.

~ Must {#general-namespace-startswith}
start the namespace with "Azure" or "com.azure" or similar to indicate an Azure client library.
~

~ Must {#general-namespace-serviceclient}
pick a package name that allows the consumer to tie the namespace to the service being used.  As a default, use the compressed service name at the end of the namespace.  The namespace does **NOT** change when the branding of the product changes, so avoid the use of marketing names that may change.  (See below for examples).
~

A compressed service name is the service name without spaces.  It may further be shortened if the shortened version is well known in the community.  For example, "Azure Media Analytics" would have a compressed service name of "MediaAnalytics", whereas "Azure Service Bus" would become "ServiceBus".

~ Must {#general-namespace-names}
use the following list as the group of services (if the target language supports namespaces):
- `ml` for client libraries dealing with machine learning.
- `analytics` for client libraries that gather data.
- `data` for client libraries that handle databases or structured data stores.
- `identity` for client libraries dealing with authentication and authorization.
- `iot` for client libraries dealing with the Internet of Things.
- `management` for client libraries accessing the control plane (ARM).
- `media` for client libraries that deal with audio, video, or mixed reality.
- `security` for client libraries dealing with security (including authentication and authorization).
- `storage` for client libraries that handle unstructured data.
- `messaging` for client libraries that provide messaging services, such as push notifications or pub-sub.
~

~ Todo 
- Open question on using `azure.ml` vs. `azure.ai`
- Open question on including `azure.diagnostics` vs. `azure.analytics`
~

~ Must {#general-namespace-split-management-api}
place the management (ARM) API in the "management" group.  Use the grouping `<Azure>.management.<Group>.<ServiceName>` for the namespace.
~

~ MustNot {#general-namespace-avoid-ambiguity}
choose similar names for clients that do different things.
~


~ Must {#general-namespace-register}
register the chosen namespace with [adparch](https://github.com/Azure/azure-sdk-pr/issues/new/choose).
~

In cases where namespaces are supported, the namespace should be named `<AZURE>.<group>.<service>`.  All consumer-facing APIs that are commonly used should exist within this namespace.  Here:
- `<AZURE>` indicates the prefix (`Azure` or `com.azure` or similar, depending on the language)
- `<group>` is the group for the service (see the list above)
- `<service>` is the service name represented as a single word

Here are some examples of good selections (from the .NET world):
- `Azure.Data.Cosmos`
- `Azure.Identity.ActiveDirectory`
- `Azure.IoT.DeviceProvisioning`
- `Azure.Storage.Blob`
- `Azure.Messaging.NotificationHubs` (the client library for Notification Hubs)
- `Azure.Management.Messaging.NotificationHubs` (the management client for Notification Hubs)

Here are some bad examples:
- `Microsoft.Azure.CosmosDB` (not in the Azure namespace, no grouping)
- `Azure.MixedReality.Kinect` (invalid group)
- `Azure.IoT.IoTHub.DeviceProvisioning` (too many levels)

If the client library does not seem to fit into the group list, contact [adparch](https://github.com/Azure/azure-sdk-pr/issues/new/choose) for advice on the most appropriate group.  If you feel your service requires a new group, then open a "Design Guidelines Change" request.
