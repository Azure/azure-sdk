### Client interface {#general-apisurface-serviceclient}

In general, your API surface will consist of one or more _service clients_ that the consumer will instantiate to connect to your service, plus a set of supporting types.     

~ Must {#general-apisurface-serviceclientnaming}
name service client types with the _Client_ suffix.
~

There are times when operations require the addition of optional data, provided in what is colloquially known as an "options bag".  Libraries should strive for consistent naming.

~ Should {#general-apisurface-clientoptionsnaming}
name the type for service client option bags with the _ClientOptions_ suffix.
~

~ Should {#general-apisurface-operationoptionsnaming}
name operation option bag types with the _Options_ suffix.  For example, if the operation is `GetSecret`, then the type of the options bag would be called `GetSecretOptions`.
~

~ Must {#general-apisurface-serviceclientnamespace}
place service client types that the consumer is most likely to interact with in the root namespace of the client library (assuming namespaces are supported in the target language).  Specialized service clients may be placed in sub-namespaces.
~

~ Must {#general-apisurface-serviceclientconstructor}
allow the consumer to construct a service client with the minimal information needed to connect and authenticate to the service.
~

~ Must {#general-apisurface-standardized-verbs}
standardize verb prefixes within a set of client libraries for a service.  The service must be able to speak about a specific operation in a cross-language manner within outbound materials (such as documentation, blogs, and public speaking).  They cannot do this if the same operation is referred to by different verbs in different languages.
~

~ Must {#general-apisurface-supportallfeatures}
support 100% of the features provided by the Azure service the client library represents. Gaps in functionality cause confusion and frustration among developers.
~

### Network requests

Since the client library generally wraps one or more HTTP requests, it is important to support standard network capabilities.  Asynchronous programming techniques are not widely understood, although such techniques are essential in developing scalable web services and required in certain environments (such as mobile or Node environments).  Many developers prefer synchronous method calls for their easy semantics when learning how to use a technology.  In addition, consumers have come to expect certain capabilities in a network stack - capabilities such as call cancellation, automatic retry, and logging. 

~ Must {#general-apisurface-syncandasync}
support both synchronous and asynchronous method calls, except where the language (or default runtime) does not support one or the other.
~

~ Must {#general-apisurface-identifyasync}
ensure that the consumer can identify which methods are async and which are synchronous.
~

When an application makes a network request, the network infrastructure (like routers) and the called service may take a long time to respond and, in fact, may never respond. A well-written application SHOULD NEVER give up its control to the network infrastucture or service. Here are some examples as to why this is so important:

- When an orchestrator needs to terminate a service (due to scale in, reconfiguration, or upgrading to a new version), the orchestrator typically notifies a running service instance by sending the Posix SIGINT. When the service receives this signal, it should terminate as quickly and gracefully as possible by setting a cancellation mechanism which is honored by all network operations that are currently in progress.
- When a consumer's web server receives a request, it may set a time limit indicating how much time it is allowing before it must give a response to the user.
- When a consumer's GUI application makes a request to an Azure service via our SDK, the GUI might offer a cancel button so that the end user can indicate that they are no longer in waiting for an operation or operations to complete.

The best way for consumers to work with cancellation is to think of cancellation objects as forming a tree. For example:

- Cancelling a parent automatically cancels its children.
- Children can time out sooner than their parent but cannot extend the total time.
- Cancellation can happen due to timeout or due to a manual/explicit cancel.

Here is an example of how an application would use the tree of cancellations:

- When an application starts, it should create a cancellation object that represents the entire application; this object is explicitly terminated in response to the application receiving a SIGINT notification.
- When a web server receives an incoming request, it would create a new cancellation object that is a child of the application node. The new cancellation object would specify a maximum time that the web server is allowed to operate on the request.
- As part of operating on the incoming request, the web server might need to make multiple requests to other services (like a database). If these requests can be made serially or in parallel, then they might share the previously created cancellation object. However, if the web server wants to limit the time spent on 1 or more of the requests, it can create a new cancellation object (with the desired timeout value) and make this object a child of the incoming node; this way, the individual request times out either when the overall request times out or when the maximum time for this operation is exceeded - whichever happens first.
- Note that if multiple requests are made in parallel, it is common for the consumer to want to cancel all of them if any one of them fails. This should be a supported scenario.

~ Must {#general-apisurface-supportcancellation}
accept platform-native cancellation tokens (that implement a timeout) on all asynchronous calls.
~

~ Should {#general-apisurface-check-cancel-on-io-calls}
only check cancellation tokens on I/O calls (such as network requests and file loads).  Do not check cancellation tokens in between I/O calls within the client library (for example, when processing data between I/O calls).
~

~ MustNot {#general-apisurface-no-leaking-implementation}
leak the underlying protocol transport implementation details to the consumer.  All types from the protocol transport implementation must be appropriately abstracted.
~

### Authentication

Azure services use a variety of different authentication schemes to allow clients to access the service.  Conceptually, there are two entities responsible in this process: a credential and an authentication policy.  Credentials provide confidential authentication data.  Authentication policies use the data provided by a credential to authenticate requests to the service.  

~ Must {#general-apisurface-support-all-auth-techniques}
support all authentication techniques that the service supports.
~

~ Must {#general-apisurface-use-azure-core}
use credential and authentication policy implementations from the Azure Core library where available.
~

~ Must {#general-apisurface-prefer-token-auth}
provide credential types that can be used to fetch all data needed to authenticate a request to the service in a non-blocking atomic manner for each authentication scheme that does not have an implementation in Azure Core.
~

~ Must {#general-apisurface-auth-in-constructors}
provide service client constructors or factories that accept any supported authentication credentials.
~

Client libraries may support providing credential data via a connection string __ONLY IF__ the service provides a connection string to users via the portal or other tooling.   Connection strings are generally good for getting started as they are easily integrated into an application by copy/paste from the portal.  However, connection strings are considered a lesser form of authentication because the credentials cannot be rotated within a running process.

~ MustNot {#general-apisurface-no-connection-strings}
support constructing a service client with a connection string unless such connection string is available within tooling (for copy/paste operations).
~
