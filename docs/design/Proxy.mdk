## Proxy {#general-proxy}

Apps that integrate the Azure SDK need to operate in common enterprises.  It is a common practice to implement HTTP proxies for control and caching purposes.  Proxies are generally configured at the machine level and, as such, are part of the environment.  However, there are reasons to adjust proxies (for example, testing to rewrite URLs to a test environment).  The Azure SDK and all client libraries must be able to operate in those environments.

### Supported proxy configurations {#general-proxy-support}

There are a number of common methods for proxy configuration.  However, they fall into four groups:

1. Inline, no authentication (filtering only)
2. Inline, with authentication
3. Out of band, no authentication
4. Out of band, with authentication

For inline/no-auth proxy, nothing needs to be done.  The Azure SDK will work without any proxy configuration.  For inline/auth proxy, the connection may receive a `407 Proxy Authentication Required` status code.  This will include a scheme, realm, and potentially other information (such as a `nonce` for digest authentication).  The client library must resubmit the request with a `Proxy-Authorization` header that provides authentication information suitably encoded for the scheme.  The most common schemes are Basic, Digest, and NTLM.

For an out-of-band/no-auth proxy, the client will send the entire request URL to the proxy instead of the service.  For example, if the client is communicating to `https://foo.blog.storage.azure.net/path/to/blob`, it will connect to the `HTTPS_PROXY` and send a `GET https://foo.blog.storage.azure.net/path/to/blob HTTP/1.1`.   For an out-of-band/auth proxy, the client will send the entire request URL just as in the out-of-band/no-auth proxy version, but it may send back a `407 Proxy Authentication Required` status code (as with the inline/auth proxy).

WebSockets can normally be tunneled through a HTTP proxy, in which case the proxy authentication happens during the CONNECT call.  There are other types of proxy.  The most notable for SDK usage is the SOCKS proxy is used for non-HTTP traffic (such as AMQP or MQTT).

Most proxy configuration will be done by adopting the HTTP pipeline that is common to all Azure service client libraries.

~ Must
Support proxy configuration via common global configuration directives.

- Linux and Mac environments use the HTTPS_PROXY (and associated) environment variables.
- Windows environments use the WinHTTP proxy configuration.
~

~ Must
Support Azure SDK-wide configuration directives for proxy configuration.
~

~ Must
Support client-library specific configuration directives for proxy configuration.
~

~ Must
Log `407 Proxy Authentication Required` requests and responses.
~

~ Must
Indicate in logging if the request is being sent to the service via a proxy, even if proxy authentication is not required.
~

~ Must
Support Basic and Digest authentication schemes.
~

~ Should
Support the NTLM authentication scheme.
~

There is no requirement to support SOCKS at this time.  We recommend services adopt a WebSocket connectivity option (for example, AMQP or MQTT over WebSockets) to ensure compatibility with proxies.
