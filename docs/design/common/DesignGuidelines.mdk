Madoko documentation: http://madoko.org/reference.html

Title       : Azure SDK Design Guidelines
Title Note  : Version 1.0.0-preview2
Author      : Brian Terlson
Affiliation : ADP / JS &amp; TS
Email       : brian.terlson@microsoft.com
Author      : Jeffrey Richter
Affiliation : ADP / .NET
Email       : jeffreyr@microsoft.com
Author      : Johan Stenberg
Affiliation : ADP / Python
Email       : johan.stenberg@microsoft.com
Author      : Jonathan Giles
Affiliation : ADP / Java
Email       : jonathan.giles@microsoft.com
Author      : Krzysztof Cwalina
Affiliation : ADP / .NET
Email       : kcwalina@microsoft.com
Logo        : False
Embed       : False
css         : custom.css

[INCLUDE=../components.mdk]

[TITLE]

# Azure SDK Design Guidelines { -;  toc-line: '' }

This document describes architectural and API design guidelines for Azure dataplane client libraries. These guidelines apply to all programming languages.
There are also language-specific guidelines for C#, Java, Python, and JavaScript. If any language-specific guideline conflicts with anything in this guideline,
the language-specific guideline should be followed.

[TOC]

# Terminology

- **SDK**: Software Development Kit. This refers to the entire Azure SDK for a single language, itself broken up into numerous Azure SDK Components (as defined below).

- **Azure SDK Component**: An Azure SDK component (also referred to as 'SDK component', or simply 'component') represents the software (and associated tools, documentation, samples, etc.) that
exist to support a single Azure service. Each Azure SDK component is published separately to the appropriate language-specific locations. These releases are performed exclusively by the Azure SDK 
engineering systems team. Developers consume and use each component separately as necessary to solve their use case.

- **Client Library**. This refers to a library that cusotmer-developers use to ease working with a specific Azure service. There is one client library per service and per programming language. 

- **Package**. This refers to a client library after it has been packaged for distribution for customer-developers to consume. Examples are:
   - A Nuget package for a .NET client library
   - A Maven package for a Java library
   - An NPM package for a JavaScript library
   - A PiPI package for a Python library
   - A GitHub repositiory for a Go library (NOTE: Go is not a supported language yet)

# Pre-requisites

Releasing an SDK component that provides a more convenient means of connecting to a service requires that the service itself be in a state where it has stablised. 
We can build SDK components whilst a service stablises, but we should never distribute a GA release until the service and the client library is stable.

~ MustNot {#stable-service}
make a GA release of a SDK component until the underlying service is also in GA, with a stable protocol. 
~

~ MustNot {#stable-swagger}
make a GA release of a SDK component for a service whose protocol is based on a REST API until there is a stable GA Swagger specification available.
~

# Functionality

~ Must {#support-all-service-features}
support 100% of the features provided by the Azure service the SDK component represents. Gaps in functionality cause confusion and frustration among developers.
~

# Operating Systems

~ ShouldNot {#no-native-code}
write platform-specific / native code. If any such code is required for proper functioning of the SDK component, it should be specifically called out as part of the review process and appropriate justification provided.
~

~ Must {#test-sample-apps-on-all-operating-systems}
test that sample apps execute as expected on Linux, Windows, and macOS.
~

# GitHub Requirements

~ Must {#github-open-source}
ensure that all library code is public and open source on GitHub. Library code must be either in the [Azure GitHub organization](https://github.com/Azure/) 
or a module in the language-specific SDK 'mono-repo' (e.g. [Azure SDK for Java](https://github.com/Azure/azure-sdk-for-java)). 
If an independent repo is used then the repository name must be `azure-[service-name]-[language]`.
~

~ Should {#github-be-open} 
develop in the open on GitHub. It is recommended to have your GitHub repo be set up and active at least a month prior to your initial release.
~

~ Must {#github-active}
remain active in GitHub. Your SDK component's GitHub repo is your primary touch point with the developer community so it's important to keep up with the activity there. 
Issues and pull requests on GitHub must have an authoritative comment within one week of filing.
~

~ Should {#github-review-open-source-guidelines}
review the Microsoft Open Source Guidelines' [community section](https://docs.opensource.microsoft.com/releasing/foster-your-community.html) for more information on fostering a healthy open-source community.
~

## README<span></span>.md

~ Must {#github-readme}
include in your GitHub repo a README<span></span>.md file that has the sections shown below. Rather than produce this from scratch, refer to the template readme<span></span>.md file and take that as a starting point.

- Short introduction of the service
- Maven
  - Maven dependency fragment for latest GA release (with no version - link to central document for details on how to depend on Azure SDK BOM)
  - Maven dependency fragment for latest snapshot release
- Documentation
  - Link to reference documentation
  - Link to relevant quick starts and tutorials
  - Samples table
- Contributing
  - Must include a reference to the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct) and a link to the CONTRIBUTING.md file
  - Should encourage developers to seek support on Stack Overflow
~

## CONTRIBUTING<span></span>.md

~ Must {#github-contributing}
include CONTRIBUTING<span></span>.md file in your GitHub repo, using it to describe the process by which contributors can make contributions to the project. 
An example CONTRIBUTING.md is provided by the [Microsoft Open Source Guidelines](https://docs.opensource.microsoft.com/releasing/overview.html):

```
# Contributing

This project welcomes contributions and suggestions. Most contributions require you to
agree to a Contributor License Agreement (CLA) declaring that you have the right to,
and actually do, grant us the rights to use your contribution. For details, visit
https://cla.microsoft.com.

When you submit a pull request, a CLA-bot will automatically determine whether you need
to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the
instructions provided by the bot. You will only need to do this once across all repositories using our CLA.

This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).
For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)
or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.
```
~

~ Must {#github-contributing-extra}
include any relevant processes and procedures must be documented, such as:

- Pre-requisites for successfully building and testing
- How to run builds and tests
- Generating reference documentation and other reports (linters, code coverage, etc)
~

## LICENSE<span></span>.md

~ Must {#github-license}
include a LICENSE<span></span>.md file containing your license text (which by default should be the standard MIT license).
~

## CODEOWNERS

CODEOWNERS is a GitHub standard to specify who is automatically assigned pull requests to review. This helps to prevent pull requests from languishing without review. GitHub can also be configured to require review from code owners before a pull request can be merged. Further reading is available from the following two URLs:

- [https://blog.github.com/2017-07-06-introducing-code-owners/](https://blog.github.com/2017-07-06-introducing-code-owners/)
- [https://help.github.com/articles/about-codeowners/](https://help.github.com/articles/about-codeowners/)

~ Must {#github-codeowners}
edit the root-level CODEOWNERS file to ensure that it is updated to redirect all pull requests for the directory of the SDK component to point to the relevant engineers of this component. If the SDK component will exist within its own repository, then a CODEOWNERS file must be introduced and configured appropriately.
~

# Language-Specific Guidelines

## General Guidelines { #common-general }

These language-specific gudelines overrule language independent guidelines.

~ Must {#general-follow-language-guidelines}
provide SDKs for the following languages: C#, Java, Python, JavaScript.
~

~ May {#general-ship-other-langs}
provide SDKs for the following languages: Go, C++
~

~ Todo
This will result in partial coverage for optional languages. Is that OK?
~

~ Must {#general-support-cancellation}
support cancellations.
~

~ Must {#general-support-retries}
support retries
~

~ MustNot {#general-no-concrete-logging}
depend on concrete logging, dependency injection, or configuration technologies.
~

The SDKs will be used in applications that might be using ther logging, DI, and configuration technologies of their choice.

## Telemetry { #general-telemetry }

Telemetry is used by service teams (not customers) to monitor what SDK a client is using to call into their service. Specifically, the service team can detect client OS, language, language version, and service SDK version. Some clients can prepend additional information indicating the name and version of the client application.

~ Must
send telemetry information in the User-Agent header, with the header value in the the following format:

```
[<application_id>/<SPACE\>]<sdk_name>/<sdk_version>/<SPACE\><platform_information>
```

- `<application_id> ::=` optional application-specific string. The string is supplied by the user of the SDK, e.g. "AzCopy/10.0.4-Preview"
- `<sdk_name> ::=` name of the SDK, e.g. "Azure-Storage-Blob"
- `<sdk_version> ::=` the version of the SDK. Note: this is not the version of the service
- `<platform_information> ::=` information about the currently-executing OS and runtime, e.g. "(NODE-VERSION v4.5.0; Windows_NT 10.0.14393)"
~

~ Example {#general-example-user-agent-strings; caption: "Example User-Agent header values"}


- "Azure-Storage/1.4.0 (NODE-VERSION v4.5.0; Windows_NT 10.0.14393)"
- "AzCopy/10.0.4-Preview Azure-Storage/1.4.0 (NODE-VERSION v4.5.0; Windows_NT 10.0.14393)"
~ 

For details on the User-Agent header, see https://tools.ietf.org/html/rfc7231#section-5.5.3

~ Note
Today, the <sdk_name> for all storage SDKs/packages (Blob, File, etc.) is simply "Azure-Storage". The guideline above proposes that we standardize on full SDK names, e.g. "Azure-Storage-Blob".
~

~ TODO
Provide the full list of SDK names.
~

~ TODO
Provide language-specific guidelines (and possibly shared library) for generating <platform_information>
~

~ TODO
Provide shared library API for injecting telemetry information
~

## Logging {#general-logging}

~ Must {#general-logging-pluggable}
support pluggable loggers.
~

~ Must {#general-logging-levels}
emit the following log levels: Verbose (i.e. details), Informational (things happened), Warning (might be a problem or not), and Error.
~

~ MustNot {#general-logging-no-sensitive-info}
send sensitive information to the logs, e.g. remove account keys when logging headers.
~

~ Must {#general-logging-warn-if-slow-request}
log a Warning message, if a request takes longer than some specified threshold. The default threshold is 3 seconds.
~

~ Must {#general-logging-requests-in-info}
log request line, response line, and headers, as Informational message.
~

~ Must {#general-logging-error-for-bad-status}
log an Error message, if a response comes back with a status codes between 400-599.
~

Some services use status codes in this range in normal course of operation, e.g. implement an "exists" check by returning 404 (not found). In such situations, the particular service might opt out from logging such status code as error.

~ Must {#general-logging-warning-if-retry}
log a Warning message, if a service call needs to be retried.
~

~ Must {#general-logging-info-if-cancelled}
log an Informational message, if a service call is cancelled.
~

~ Must {#general-logging-error-if-exceptions}
log exceptions thrown as an Error message. If the log level set to Verbose, append stack trace information to the message.
~

~ Must {#general-logging-use-syslog}
log failures (exceptions and error status codes), regardless logging level, to the event log on Windows and the syslog on Linux, i.e. this cannot be turned off by the SDK user unless they replace the pipeline.
~

~ Todo
describe format/syntax of the log messages.
~

~ Todo
provide and describe pipeline APIs for logging.
~

## Retry {#general-retry}

There are many reasons why failure can occur when a client application attempts to send a network request to a service. Some examples are timeout, network infrastructure failures, service rejecting the request due to throttle/busy, service instance terminating due to service scale down, service instance going down to be replaced with another version, service crashing due to an unhandled exception, etc. By offering a built-in retry mechanism (with a default configuration overridable by the customer), our SDKs and the customer’s application become resilient to these kinds of failures. Note that some services charge real money for each try and so customers should be able to disable retries entirely if they prefer to save money over resiliency.

~ Must {#general-retry-configuration}
offer the following configuration settings:

- Retry policy (exponential or fixed)
- Maximum number of tries (32-bit integer; 0=default, 1=1 try & no retries, 2=1 try & 1 retry, etc.)
- Per-try timeout (timespan/duration; default=worst anticipated bandwidth times largest single request and response payloads)
- Retry delay (timespan/duration; this is the delay for fixed policy, the delay is increased exponentially by this amount for the exponential policy)
- Max retry delay (timespan/duration; the delay will never go over this amount)
~

~ Must {#general-retry-available-if-supported}
offer additional retry mechanism if supported by the service
~

- For example, the Azure Storage Blob service supports retrying read operations against a secondary datacenter

~ Must {#general-retry-reset-on-retry}
reset (or seek back to position 0) any request data stream before retrying a request
~

~ Must {#general-retry-honor-caller-cancellation}
honor any cancellation mechanism passed-in be the caller which can terminate the request before retried have been attempted.
~

~ Must {#general-retry-update-time-to-live}
update any query parameter or request header that gets sent to the service telling it how much time the service has to process the individual request attempt.
~

~ Must {#general-retry-on-hardware-network-failure}
retry in the case of a hardware network failure as it may self-correct
~

~ Must {#general-retry-on-service-not-found}
retry in the case of a service not found error as the service may be coming back online or a load balancer may be reconfiguring itself.
~

~ Must {#general-retry-on-per-try-timeout}
retry in the case of a per-try timeout
~

~ Must {#general-retry-if-throttled}
retry if the service successfully responds indicating that it is throttle requests.
~

~ MustNot {#general-retry-no-retry-if-successfully-failed}
retry if the service successfully responds indicating that the requested operation failed.
~

## Cancellation & Timeouts

When an application makes a network request, the network infrastrucutre(like routers) and the called service may take a long time to respond and, in fact, may never respond. A well-written application SHOULD NEVER give up its control to the network infrasture or service. To ensure that users of our SDKs can keep control of their application, SDK methods that perform I/O operations MUST accept some kind of cancellation & timeout mechanism specific to the programming language.

Here are some examples as to why this is so important:

- When an orchestrator needs to terminate a service (due to scale in, reconfiguration, or upgrading to a new version), the orchestrator typically notifies a running service stance by simulating a Ctrl+C or SIGINT. When the service recieves this, it should terminate as quickly & gracefully as possible by setting a cancelation mechanism which should be honored by ALL functions that are currently in-flight.
- When a customer's webserver receives a request, it may set a time-limit indicating how much time it is allowing before it must give a response to the customer.
- When a customer's GUI appication makes a request to an Azure service via our SDK, the GUI might offer a cancel button so that the end-user can indicate that they are no longer in waiting for an operation or operations to complete.

The best way for customers to work with cancellation is to think of cancellation objects as forming a tree. For example:

- Cancelling a parent automatically cancels it’s children.
- Children can timeout sooner than their parent but cannot extend the time.
- Cancellation can happen due to timeout or due to a manual/explicit cancel.

Here is an example of how an application would use the tree of cancellations:

- When an application starts, it should create a cancellation object that represents the entire application; this object is explicitly terminated in response to the application receiving a Ctrl+C or SIGINT notification.
- When a webserver receives an incoming request, it would create a new cancellation node that is a child of the application node. The new node would specify a maximum time that the webserver is allowing beforeto operate on the incoming request.
- As part of operating on the incoming request, the webserver might need to make multiple requests to other services (like a database). If these requests can be made serially or in parallel, then they might share the previously-created cancellation node's timeout. However, if the webserver wants to limit the time spent on 1 or more the requests, it can create a new cancellation node (with the desired timeout value) and make this node a child of the incoming request's node; this way, the individual request timesout either when the overall request timesout or when the max time for this operation timeout - whichever happens first.
- Note that if multiple request are made in parallel, it is common for the customer to want to cancel all of them if any one of them fails. This should be a supported scenario.

## Dependencies

Many programming languages do not allow a customer to load multiple versions of the same package. So, if we have an SDK that requires v3 of package Foo and the customer wants to use v5 of package Foo, then the customer cannot build their application. This means that our SDKs should not dependend on any additional packages. In addition, customer applications must be able to deploy as fast as possible onto datacetner virtual machines. Removing additional code (like dependencies) improves deployment performance.

~ MustNot
be dependent on any other packages
~

~ Must
copy & paste other required code into the SDK package in order to avoid taking a dependency on another package. Make sure that you are not violating any licensing agreements.
~

1.5.3 :warning: **NOTE** For some languages (most notably Java) you will have no choice but to take dependency on other packages. You must only do this if you truely have no other way to avoid taking the dependency.

## Configuration

~ Must
allow any customer configuration or customization via SDK functions or properties as this allos the cusomter code to determine how to configure SDK options and also how to expose those SDK options to the customer's users.
~

~ MustNot
allow any customer configuration or customization via a shared resource like a file or environment variable as this prevents different configurations to exist at the same time.
~

## Other topics to be covered

- Tracing
- Versioning
- Authorization (credentials)
- Error/Exception handling
- Packaging (Brian)
- Namespaces (Krzysztof)
- High level structure of APIs (Krzysztof)
- Docs (reference, Samples, Quick Starts) (Jonathan Giles)
- UX Study

- Engineering TOC:
  - Linter
  - Packaging
  - Signing
  - Project Structure
  - Repos
  - License
  - Testing (unit & E2E)
  - Supported versions
  - Platform Support
  - Stress
  - Performance

# C# Specific Guidelines

[INCLUDE=../dotnet/DesignGuidelines.mdk]

# Java Specific Guidelines

[INCLUDE=../java/DesignGuidelines.mdk]

# Python Specific Guidelines

[INCLUDE=../python/DesignGuidelines.mdk]


# JavaScript Specific Guidelines
=======
[INCLUDE=../typescript/DesignGuidelines.mdk]