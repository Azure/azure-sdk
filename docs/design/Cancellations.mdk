## Cancellation & Timeouts {#general-cancellations}

When an application makes a network request, the network infrastrucutre(like routers) and the called service may take a long time to respond and, in fact, may never respond. A well-written application SHOULD NEVER give up its control to the network infrasture or service. To ensure that users of our SDKs can keep control of their application, SDK methods that perform I/O operations MUST accept some kind of cancellation & timeout mechanism specific to the programming language.

Here are some examples as to why this is so important:

- When an orchestrator needs to terminate a service (due to scale in, reconfiguration, or upgrading to a new version), the orchestrator typically notifies a running service stance by simulating a Ctrl+C or SIGINT. When the service recieves this, it should terminate as quickly & gracefully as possible by setting a cancelation mechanism which should be honored by ALL functions that are currently in-flight.
- When a customer's webserver receives a request, it may set a time-limit indicating how much time it is allowing before it must give a response to the customer.
- When a customer's GUI appication makes a request to an Azure service via our SDK, the GUI might offer a cancel button so that the end-user can indicate that they are no longer in waiting for an operation or operations to complete.

The best way for customers to work with cancellation is to think of cancellation objects as forming a tree. For example:

- Cancelling a parent automatically cancels itâ€™s children.
- Children can timeout sooner than their parent but cannot extend the time.
- Cancellation can happen due to timeout or due to a manual/explicit cancel.

Here is an example of how an application would use the tree of cancellations:

- When an application starts, it should create a cancellation object that represents the entire application; this object is explicitly terminated in response to the application receiving a Ctrl+C or SIGINT notification.
- When a webserver receives an incoming request, it would create a new cancellation node that is a child of the application node. The new node would specify a maximum time that the webserver is allowing beforeto operate on the incoming request.
- As part of operating on the incoming request, the webserver might need to make multiple requests to other services (like a database). If these requests can be made serially or in parallel, then they might share the previously-created cancellation node's timeout. However, if the webserver wants to limit the time spent on 1 or more the requests, it can create a new cancellation node (with the desired timeout value) and make this node a child of the incoming request's node; this way, the individual request timesout either when the overall request timesout or when the max time for this operation timeout - whichever happens first.
- Note that if multiple request are made in parallel, it is common for the customer to want to cancel all of them if any one of them fails. This should be a supported scenario.
