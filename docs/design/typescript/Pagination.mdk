### Pagination {#ts-pagination}

Most developers will want to process a list one item at a time. Higher-level APIs (for example, async iterators) are preferred in the majority of use cases.  Finer-grained control over handling paginated result sets is sometimes required (for example, to handle over-quota or throttling).  

~ Must
provide a `list` method that returns a `PagedAsyncIterableIterator` from the module `@azure/core-paging`.
~

~ Must
provide page-related settings to the `byPage()` iterator and not the per-item iterator.
~

~ Must
take a `continuationToken` option in the `byPage()` method. You must rename other parameters that perform a similar function (for example, `nextMarker`).  If your page type has a continuation token, it must be named `continuationToken`.
~

~ Must
take a `maxPageSize` option in the `byPage()` method.
~

~ Example {#ts-example-pagination; caption="Example of a paginating client"}

```javascript
// usage
const client = new ServiceClient()
for await (const item of client.listItems()) {
    console.log(item);
}

for await (const page of client.listItems().byPage({ maxPageSize: 50 })) {
    console.log(page);
}

// implementation
interface Item {
    name: string;
}

interface Page {
    continuationToken: string;
    items: Item[];
}

class ServiceClient {
    /* ... */
    listItems(): PagedAsyncIterableIterator<Item, Page> {
        async function* pages () { /* ... */ }
        async function* items () {
            for (const page of pages()) {
                for (const item of page.items) {
                    yield item;
                }
            }
        }

        const itemIter = items();
        
        return {
            next() {
                return itemIter.next();
                /* ... */
            },
            byPage() {
                return pages();
            },
            [Symbol.asyncIterator]() { return this }
        }
    }
}
```
~

~ Must {#general-pagination-paginate-lists}
expose non-paginated list endpoints identically to paginated list endpoints. Users shouldn't need to appreciate the difference.
~

~ Must {#general-pagination-distinct-types}
use different types for entities returned from a `list` endpoint and a `get` endpoint if the returned entities have a different shape.  If both entities are the same form, use the same type.
~

~ Note
Services should return the same shape for entities from a `list` endpoint vs. a `get` endpoint unless there's a good reason for the difference.  Using the same type for both operations will make the API surface in the client library simpler.
~

~ MustNot {#general-pagination-no-item-iterators}
expose an iterator over individual items if it causes additional service requests. 

Some services charge on a per-request basis. One `GET` per item is often too expensive when the data isn't used.
~

~ MustNot {#general-pagination-support-toArray}
expose an API to get a paginated collection into an array.  

Services may return many pages, which can lead to memory exhaustion in the application.
~

~ Must {#general-pagination-low-level-APIs}
expose paging APIs when iterating over a collection. Paging APIs must accept a continuation token (from a prior run) and a maximum number of items to return.  The paging API must return a continuation token as part of the response so that the iterator may continue, potentially on a different machine.
~
