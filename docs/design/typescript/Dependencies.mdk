### Dependencies {#ts-dependencies}

Dependencies bring in many considerations that are often easily avoided by avoiding the dependency:

**Versioning**: Many programming languages don't allow a consumer to load multiple versions of the same package. For example, if we have a client library that requires v3 of package `Foo` and the consumer wants to use v5 of package `Foo`, then the consumer can't build their application. Client libraries shouldn't have dependencies by default.

**Size**: Consumer applications need to deploy as fast as possible into the cloud. Remove additional code (like dependencies) to improve deployment performance.

**Licensing**: You must be conscious of the licensing restrictions of a dependency and often provide proper attribution and notices when using them.

**Compatibility**: You don't control the dependency. It may choose to evolve in a direction that is incompatible with your original use.

**Security**: If a vulnerability is discovered in a dependency, it may be difficult or time consuming to get the vulnerability corrected.

~ Must
depend on the [Azure Core library](#ts-azure-core) for functionality that is common across all client libraries.  This library includes APIs for HTTP connectivity, global configuration, and credential handling.
~

~ MustNot
depend any other packages within the client library distribution package. Dependencies are thoroughly vetted through architecture review.  Build dependencies, by contrast, are acceptable and commonly used.
~

~ Should
consider copying or linking required code into the client library to avoid taking a dependency on another package. Don't violate the license agreements. Consider the maintenance that will be required when duplicating code. ["A little copying is better than a little dependency"](https://www.youtube.com/watch?v=PAAkCSZUG1c&t=9m28s) (YouTube).
~

~ MustNot {#general-no-concrete-logging}
depend on concrete logging, dependency injection, or configuration technologies (except as implemented in the Azure Core library).
~

~ ShouldNot
take dependencies on tiny libraries as the cost of many small libraries adds up over time. Larger dependencies are subject to approval.
~

~ ShouldNot
depend directly on polyfills or other libraries that modify global scope. If developers using older runtimes need to polyfill some capability, the package install and usage instructions (in the `README`) should indicate this dependency.
~

The following table lists the well-known and already-blessed dependencies outside of Azure Core that may be used in production (non-test) code.

~ TableFigure {#ts-known-deps; caption="Well-known JS Dependencies"}

| Library Name | Description |
|--------------|-------------|
| `axios` | HTTP client abstraction with browser and node support |
| `debug` | Logging library |
| `events` | Node EventEmitter polyfill |
| `stream-browserify` | Node Stream polyfill for browsers |
| `process` | Node Process polyfill (though you should prefer to use small stubs) |
| `rhea` | Library for talking over AMQP. |
| `rhea-promise` | Promisified version of above |
| `tough-cookie` | Support cookies, even in Node |
| `url` | Node Url polyfill |
| `util` | Node Util polyfill |
| `uuid` | UUIDs |
~
