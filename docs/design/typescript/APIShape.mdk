### Client Constructors & Factories {#ts-apisurface-serviceclient}

TYour API surface will consist of one or more _service clients_ that the consumer will instantiate to connect to your service, plus a set of supporting types. The basic shape of JavaScript service clients is shown in the following example:

~ Example {#ts-example-service-client; caption="An example service client"}

```javascript
export class ServiceClient {
  // client constructors have overloads for handling different
  // authentication schemes.
  constructor(connectionString: string, options?: ServiceClientOptions);
  constructor(host: string, credential: TokenCredential, options?: ServiceClientOptions);
  constructor(...) { }

  // Service methods. Options take at least an abortSignal.
  async createItem(options?: CreateItemOptions): CreateItemResponse;
  async deleteItem(options?: DeleteItemOptions): DeleteItemResponse; 

  // Simple paginated API
  listItems(): PagedAsyncIterableIterator<Item, ItemPage> { }

  // Clients for sub-resources
  getItemClient(itemName: string) { }
}
```
~

~ Must {#ts-apisurface-serviceclientnamespace}
place service client types that the consumer is most likely to interact as a top-level export from your library.  That is, the service client type should be something that can be imported directly by the consumer.
~

~ Must {#ts-apisurface-serviceclientconstructor}
allow the consumer to construct a service client with the minimal information needed to connect and authenticate to the service.
~

~ Must {#ts-apisurface-standardized-verbs}
standardize verb prefixes within a set of client libraries for a service (see [approved verbs](#ts-approved-verbs)).

The service speaks about specific operations in a cross-language manner within outbound materials (such as documentation, blogs, and public speaking).  The service can't be consistent across languages if the same operation is referred to by different verbs in different languages.
~

~ Must {#ts-apisurface-supportallfeatures}
support 100% of the features provided by the Azure service the client library represents.

Gaps in functionality cause confusion and frustration among developers. A feature may be omitted if there isn't support on the platform. For example, a library that depends on local file system access may not work in a browser.
~

~ Should {#ts-use-constructor-overloads}
provide overloaded constructors for all client construction scenarios.

Don't use static methods to construct a client unless an overload would be ambiguous.  Prefix the static method with `from` if you require a static constructor.
~

~ Should {#ts-use-overloads-over-unions}
prefer overloads over unions when either:

1. Users want to see documentation (for example, signature help) tailored specifically to the parameters they're passing in, or
2. Multiple parameters are correlated.

Unions may be used if neither of these conditions are met.
~

~ Example {#ts-example-overloads-v-unions; caption="Overloads vs. Unions"}
Let's say we have an API that takes either two numbers or two strings but not both. In this case, the parameters are correlated. If we implemented the types using unions like the following code:

```javascript
function foo(a: string | number, b: string | number): void {}
```

We have mistakenly allowed invalid arguments; that is `foo(number, string)` and `foo(string, number)`. Overloads naturally express this correlation:

```javascript
function foo(a: string, b: string): void;
function foo(a: number, b: number): void;
function foo(a: string | number, b: string | number): void {}
```

The overload approach also lets us attach documentation to each overload individually.
~

~ Example {#ts-bad-client-constructor-overloads; caption="Conflicting constructor overloads"}

```javascript
// bad example
class ExampleClient {
  constructor (connectionString: string, options: ExampleClientOptions);
  constructor (url: string, options: ExampleClientOptions);
  constructor (urlOrCS: string, options: ExampleClientOptions) {
    // have to dig into the first parameter to see whether its
    // a url or a connection string. Not ideal.
  }
}

// better example
class ExampleClient {
  constructor (url: string, options: ExampleClientOptions) {

  }

  static fromConnectionString(connectionString: string, options: ExampleClientOptions) {

  }
}
```
~

### Options {#ts-options}

The guidelines in this section apply to options passed in options bags to clients, whether methods or constructors. When referring to option names, this means the key of the object users must use to specify that option when passing it into a method or constructor.

~ Must {#ts-options-abortSignal}
name abort signal options `abortSignal`
~

~ Must {#ts-options-suffix-durations}
suffix durations with `In<Unit>`. Unit should be `ms` for milliseconds, and otherwise the name of the unit. Examples include `timeoutInMs` and `delayInSeconds`.
~


### Response formats {#ts-responses}

Requests to the service fall into two basic groups - methods that make a single logical request, or a deterministic sequence of requests.  An example of a *single logical request* is a request that may be retried inside the operation.  An example of a *deterministic sequence of requests* is a paged operation.

The *logical entity* is a protocol neutral representation of a response. For HTTP, the logical entity may combine data from headers, the body, and the status line.  For example, you may add the `ETag` header as a property on the logical entity to the deserialized content from the body of the response.

~ Must {#ts-return-logical-entities}
optimize for returning the logical entity for a given request. The logical entity MUST represent the information needed in the 99%+ case.
~

~ Must {#ts-return-expose-raw}
*make it possible* for a developer to get access to the complete response, including the status line, headers, and body.
~

~ Must {#ts-return-document-raw-stream}
document how to access the raw and streamed response for a request (if exposed by the client library).  Include comprehensive samples. 

We don't expect all methods to expose a streamed response.
~

For methods that combine multiple requests into a single call:

~ MustNot {#general-return-no-headers-if-confusing}
return headers and other per-request metadata unless it's obvious as to which specific HTTP request the methods return value corresponds to.
~

~ Must {#general-expose-data-for-composite-failures}
provide enough information in failure cases for an application to take appropriate corrective action.
~

~ ShouldNot {#general-dont-use-value}
use the following property names within a logical entity:

- `object`
- `value`

Using names that are commonly used as reserved words can cause confusion and will cause consistency issues between languages.
~

~ Example {#ts-example-return-types; caption="Response formats in TypeScript"}

```javascript
// Service operation method on a service client
  public async getProperties(
    options: ContainerGetPropertiesOptions = {}
  ): Promise<Models.ContainerGetPropertiesResponse> {
    // ...
  }

// Response type, in this case for a service which returns the
// relevant info in headers. Note how the headers are represented
// in first-class properties with intellisense etc.
export type ContainerGetPropertiesResponse = ContainerGetPropertiesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ContainerGetPropertiesHeaders;
    };
};

export interface ContainerGetPropertiesHeaders {
  // ...
  /**
   * @member {PublicAccessType} [blobPublicAccess] Indicated whether data in
   * the container may be accessed publicly and the level of access. Possible
   * values include: 'container', 'blob'
   */
  blobPublicAccess?: PublicAccessType;
  /**
   * @member {boolean} [hasImmutabilityPolicy] Indicates whether the container
   * has an immutability policy set on it.
   */
  hasImmutabilityPolicy?: boolean;
}
```
~

### Client Naming Conventions

~ Must {#ts-apisurface-serviceclientnaming}
name service client types with the _Client_ suffix.
~

~ Should
use one of the approved verbs in Table [#ts-approved-verbs] when referring to service operations
~

~ TableFigure {#ts-approved-verbs}
|Verb|Parameters|Returns|Comments|
|-|-|-|-|
|`create\<Noun>`|key, item|Created item|Create new item. Fails if item already exists.|
|`upsert\<Noun>`|key, item|Updated or created item|Create new item, or update existing item. Verb is primarily used in database-like services |
|`set\<Noun>`|key, item|Updated or created item|Create new item, or update existing item. Verb is primarily used for dictionary-like properties of a service |
|`update\<Noun>`|key, partial item|Updated item|Fails if item doesn't exist. |
|`replace\<Noun>`|key, item|Replace existing item|Completely replaces an existing item. Fails if the item doesn't exist. |
|`append\<Noun>`|item|Appended item|Add item to a collection. Item will be added last. |
|`add\<Noun>`|index, item|Added item|Add item to a collection. Item will be added at the given index. |
|`get\<Noun>`|key|Item|Will return null if item doesn't exist |
|`list\<Noun>s`||`PagedAsyncIterableIterator<TItem, TPage>`|Return list of items. Returns empty list if no items exist |
|`\<noun>Exists`|key|`bool`|Return true if the item exists. |
|`delete\<Noun>`|key|None|Delete an existing item. Will succeed even if item didn't exist.|
|`remove\<Noun>`|key|None or removed item|Remove item from a collection.|
~

~ MustNot {#ts-naming-drop-noun}
include the `Noun` when the operation is operating on the resource itself,  For example, if you have an `ItemClient` with a delete method, it should be called `delete` rather than `deleteItem`. The noun is implicitly `this`.
~

~ Must {#ts-naming-subclients}
prefix methods that create or vend subclients with `get` and suffix with `client`.  For example, `container.getBlobClient()`.
~

~ Must {#ts-naming-options}
suffix options bag parameters names with `Options`, and prefix with the name of the operation. For example, if an operation is called createItem, its options type must be called `CreateItemOptions`.
~

~ Example {#ts-example-naming; caption="Operation naming examples"}

The following are good examples of names for operations in a TypeScript client library:

```javascript
containerClient.listBlobs();
containerClient.delete();
```

The following are bad examples:

```javascript
containerClient.deleteContainer(); // don't include noun for direct manipulation
containerClient.newBlob(); // use create instead of new
containerClient.createOrUpdate(); // use upsert
containerClient.createBlobClient(); // should be `getBlobClient`.
```
~

### Network requests

When an application makes a network request, the network infrastructure (like routers) and the called service may take a long time to respond. In fact, the network infrastructure may never respond. A well-written application should **NEVER** give up its control to the network infrastructure or service.

Consider the following examples. An orchestrator needs to stop a service because of a scaling operation, reconfiguration, or upgrading to a new version). The orchestrator typically notifies a running service instance by sending an interrupt signal. The service should stop as quickly as possible when it receives this signal. Similarly, when a web server receives a request, it may set a time limit indicating how much time it's allowing before giving a response to the user. A UI application may offer the user a cancel button when making a network request.

The best way for consumers to work with cancellation is to think of cancellation objects as forming a tree. For example:

- Cancelling a parent automatically cancels its children.
- Children can time out sooner than their parent but can't extend the total time.
- Cancellation can happen because of a timeout or an explicit request.

~ Must {#ts-apisurface-supportcancellation}
accept an `AbortSignalLike` parameter on all asynchronous calls. This type is provided by `@azure/abort-controller`.
~

~ Should {#ts-apisurface-check-cancel-on-io-calls}
only check cancellation tokens on I/O calls (such as network requests and file loads).  Don't check the cancellation token between I/O calls within the client library (for example, when processing data between I/O calls).
~

~ MustNot {#general-apisurface-no-leaking-implementation}
leak the underlying protocol transport implementation details to the consumer.  All types from the protocol transport implementation must be appropriately abstracted.
~

### Authentication

Azure services use different kinds of authentication schemes to allow clients to access the service.  Conceptually, there are two entities responsible in this process: a credential and an authentication policy.  Credentials provide confidential authentication data.  Authentication policies use the data provided by a credential to authenticate requests to the service.  

~ Must {#general-apisurface-support-all-auth-techniques}
support all authentication techniques that the service supports.
~

~ Must {#general-apisurface-use-azure-core}
use credential and authentication policy implementations from the Azure Core library where available.
~

~ Must {#general-apisurface-prefer-token-auth}
provide credential types that can be used to fetch all data needed to authenticate a request to the service. Credential types should be non-blocking and atomic.  Use credential types from the `@azure/core-auth` library where possible.
~

~ Must {#general-apisurface-auth-in-constructors}
provide service client constructors or factories that accept any supported authentication credentials.
~

Client libraries may support connection strings __ONLY IF__ the service provides a connection string to users via the portal or other tooling. Connection strings are easily integrated into an application by copy/paste from the portal.  However, connection strings don't allow the credentials to be rotated within a running process.

~ MustNot {#general-apisurface-no-connection-strings}
support constructing a service client with a connection string unless such connection string is available within tooling (for copy/paste operations).
~

### Modern & Idiomatic JavaScript

~ Must {#ts-use-promises}
use built-in promises for asynchronous operations. You may provide overloads that take a callback. Don't import a polyfill or library to implement promises.
~

Promises were added to JavaScript ES2015. ES2016 and later added `async` functions to make working with promises easier. Promises are broadly supported in JavaScript runtimes, including all currently supported versions of Node.

~ Should {#ts-use-async-functions}
use `async` functions for implementing asynchronous library APIs.

If you need to support ES5 and are concerned with library size, use `async` when combining asynchronous code with control flow constructs.  Use promises for simpler code flows.  `async` adds code bloat (especially when targeting ES5) when transpiled. 
~

~ Must {#ts-use-iterators}
use [Iterators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators) and [Async Iterators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of) for sequences and streams of all sorts.

Both iterators and async iterators are built into JavaScript and easy to consume. Other streaming interfaces (such as node streams) may be used where appropriate as long as they're idiomatic.
~

~ Should {#ts-use-interface-parameters}
prefer interface types to class types. JavaScript is fundamentally a duck-typed language, and so alternative classes that implement the same interface should be allowed. Declare parameters as interface types over class types whenever possible. Overloads with specific class types are fine but there should be an overload present with the generic interface.
~

~ Example {#ts-example-iterators; caption="Good and bad examples for returning lists"}

```javascript
// bad synchronous example
function listItems() {
  return {
    nextItem() { /*...*/ }
  }
}

// better synchronous example
function* listItems() {
  /* ... */
}

// bad asynchronous examples
function listItems() {
  return Rx.Observable.of(/* ... */)
}

function listItems(callback) {
  // fetch items
  for (const item of items) {
    callback (item)
    }
}

// better asynchronous example
async function* listItems() {
  for (const item of items) {
    yield item;
  }
}
```
~

### Modern & Idiomatic TypeScript

~ Must {#ts-use-typescript}
implement your library in TypeScript.
~

~ Must {#ts-ship-type-declarations}
include type declarations for your library.
~

TypeScript static types provide significant benefit for both the library authors and consumers. TypeScript also compiles modern JavaScript language features for use with older runtimes.

#### tsconfig.json {#ts-tsconfig.json}

Your tsconfig.json should look similar to the following example:

~ Figure {#ts-figure-tsconfig-json; caption: "An example tsconfig.json" }
```javascript
{
  "compilerOptions": {
    "declaration": true,
    "module": "es6",
    "moduleResolution": "node",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "outDir": "./dist-esm",
    "target": "es6",
    "sourceMap": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "importHelpers": true
  },
  "include": ["./src/**/*"],
  "exclude": ["node_modules"]
}
```
~

~ Must {#ts-config-exclude}
  have at least "node_modules" in the `exclude` array. TypeScript shouldn't needlessly type check your dependencies.
~

~ MustNot {#ts-config-lib}
  use the `compilerOptions.lib` field. Built in typescript libraries (for example, `esnext.asynciterable`) should be included via reference directives. See also [Microsoft/TypeScript#27416](https://github.com/Microsoft/TypeScript/issues/27416).
~

~ Must {#ts-config-strict}
  set `compilerOptions.strict` to true. The `strict` flag is a best practice for developers as it provides the best TypeScript experience. The `strict` flag also ensures that your type definitions are maximally pedantic.
~

~ Must {#ts-config-esModuleInterop}
  set `compilerOptions.esModuleInterop` to true.
~

~ Must {#ts-config-allowSyntheticDefaultImports}
  set `compilerOptions.allowSyntheticDefaultImports` to true
~

~ Must {#ts-config-target}
  set `compilerOptions.target`, but it can be any valid value so long as the final source distributions are compatible with the runtimes your library targets. See also [#ts-source-distros].
~

~ Must {#ts-config-forceConsistentCasingInFileNames}
  set `compilerOptions.forceConsistentCasingInFileNames` to true. `forceConsistentCasingInFileNames` forces TypeScript to treat files as case sensitive, and ensures you don't get surprised by build failures when moving between platforms.
~

~ Must {#ts-config-module}
  set `compilerOptions.module` to `es6`. Use a bundler such as [Rollup](https://rollupjs.org/guide/en/) or [Webpack](https://webpack.js.org/) to produce the CommonJS and UMD builds.
~

~ Must {#ts-config-moduleResolution}
 set `compilerOptions.moduleResolution` to "node" if your library targets Node. Otherwise, it should be absent.
~

~ Must {#ts-config-declaration}
  set `compilerOptions.declaration` to true. The `--declaration` option tells TypeScript to emit a `d.ts` file that contains the public surface area of your library. TypeScript and editors use this file to provide intellisense and type checking capabilities. Ensure you reference this type declaration file from the `types` field of your package.json.
~

~ MustNot {#ts-config-no-experimentalDecorators}
  set `compilerOptions.experimentalDecorators` to `true`. The experimentalDecorators flag adds support for "v1 decorators" to TypeScript. Unfortunately the standards process has moved on to an incompatible second version that is not yet implemented by TypeScript. Taking a dependency on decorators now means signing up your users for breaking changes later. 
~

~ Must {#ts-config-sourceMap}
  set `compilerOptions.sourceMap` and `compilerOptions.declarationMap` to true. Shipping source maps in your package ensures clients can easily debug into your library code. `sourceMap` maps your emitted JS source to the declaration file and `declarationMap` maps the declaration file back to the TypeScript source that generated it. Be sure to include your original TypeScript sources in the package.
~

~ Must {#ts-config-importHelpers}
  set `compilerOptions.importHelpers` to true. Using external helpers keeps your package size down. Without this flag, TypeScript will add a helper block to each file that needs it. The file size savings using this option can be huge when using `async` functions (as an example) in a number of different files.
~

#### TypeScript Coding Guidelines

~ ShouldNot {#ts-no-namespaces}
use TypeScript namespaces. Namespaces either use the `namespace` keyword explicitly, or the `module` keyword with a module name (for example, `module Microsoft.ApplicationInsights { ... }`).

Use top-level imports/exports with ECMAScript modules instead. Namespaces make your code less compatible with standard ECMAScript and create significant friction with the TypeScript community.
~

~ ShouldNot {#ts-no-const-enums}
 use `const enum`. `Const enum` requires global understanding of your program to compile properly. As a result, `const enum` can't be used with Babel 7, which otherwise supports TypeScript. Avoiding `const enum` will make sure your code can be compiled by any tool. Use regular enums instead.
~