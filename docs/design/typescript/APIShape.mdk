### Approved Verbs

~ Should
use one of the approved verbs in Table [#ts-approved-verbs] when referring to service operations
~

~ TableFigure {#ts-approved-verbs}
|Verb|Parameters|Returns|Comments|
|-|-|-|-|
| create\<Noun>|key, item|Created item|Create new item. Fails if item already exists.|
| upsert\<Noun>|key, item|Updated or created item|Create new item or update existing item. Verb is primarily used in database-like services |
| set\<Noun>|key, item|Updated or created item|Create new item or update existing item. Verb is primarily used for dictionary-like properties of a service |
| update\<Noun>|key, partial item|Updated item|Fails if item does not exist. |
| replace\<Noun>|key, item|Replace existing item|Completely replaces an existing item. Fails if the item does not exist. |
| append\<Noun>|item|Appended item|Add item to a collection. Item will be added last. |
| add\<Noun>|index, item|Added item|Add item to a collection. Item will be added at the given index. |
| get\<Noun>|key|Item|Will return null if item does not exist |
| list\<Noun>||`PagedAsyncIterableIterator<TItem, TPage>`|Return list of items. Returns empty list if no items exist |
| \<noun>Exists|key|`bool`|Return true if the item exists. |
| delete\<Noun>|key|None|Delete an existing item. Will succeed even if item did not exist.|
| remove\<Noun>|key|None or removed item|Remove item from a collection. |
~

### JavaScript Client Naming Conventions

~ Must {#ts-naming-subclients}
prefix methods which create sub-clients with `create` and suffix with `client`, e.g. `container.createBlobClient()`.
~

~ Must {#ts-naming-options}
suffix options bag parameters names with `Options`.
~
### Modern & Idiomatic JavaScript

~ Must {#ts-use-promises}
  use built-in promises for asynchronous operations. You may provide overloads which take callback. Do not import any promise polyfills or libraries.
~

Promises are a part of JavaScript as of ES6, and ES2016 and later editions added async functions and other features that make working with promises easier. Promises are broadly supported in the ecosystem and in Node since 0.12.

~ Should {#ts-use-async-functions}
  use async functions for implementing asynchronous library APIs.
~

Because async function transpilation is fairly heavy, there are cases where the added code size is undesirable. This is especially true for projects which must support ES5 runtimes without generators as the code to implement generators in ES5 is quite large. That said, async functions drastically improve the readability of complex async code. A middle ground is to use the Promise APIs directly for simple things and use async functions when you need to call async APIs along with control flow constructs like `if` and loops.

~ Must {#ts-use-iterators}
  use Iterators and Async Iterators for sequences and streams of all sorts.
~

Both of these protocols are built into the language (Iterators as of ES6, Async Iterators as of ES2018) and are easy to consume using for-of and for-await-of loops. Libraries should use generators to create iterators and async generators to create async iterators (subject to the same qualifications as async functions). Other "streaming" interfaces may be used where appropriate as long as they are idiomatic. Node streams may be used in node, but should not be polyfilled in the browser.

### TypeScript

~ Must {#ts-use-typescript}
  implement your library in TypeScript.
~

~ Must {#ts-ship-type-declarations}
  include type declarations for your library.
~

TypeScript is very popular in the ecosystem and its static types provide significant benefit for both the library authors and consumers. TypeScript also compiles modern JavaScript language features down to code compatible with much older runtimes.

#### tsconfig.json {#ts-tsconfig.json}

This section covers the contents of your tsconfig.json. After implementing this section, your tsconfig.json should look similar to the following example:

~ Figure {#ts-figure-tsconfig-json; caption: "An example tsconfig.json" }
```javascript
{
  "compilerOptions": {
    "declaration": true,
    "module": "es6",
    "moduleResolution": "node",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "outDir": "./dist-esm",
    "target": "es6",
    "sourceMap": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "importHelpers": true
  },
  "include": ["./src/**/*"],
  "exclude": ["node_modules"]
}
```
~

~ Must {#ts-config-exclude}
  have at least "node_modules" in the `exclude` array. This ensures TypeScript isn't needlessly type checking your dependencies.
~

~ MustNot {#ts-config-lib}
  use the `compilerOptions.lib` field. Built in typescript libraries (e.g. esnext.asynciterable) should be included via reference directives. See also [Microsoft/TypeScript#27416](https://github.com/Microsoft/TypeScript/issues/27416).
~

~ Must {#ts-config-strict}
  set `compilerOptions.strict` to true. The strict flag serves two purposes: itâ€™s a best practice for developers as it provides the best TypeScript experience, and also, strict ensures that your type definitions are maximally pedantic so strict TypeScript consumers get their best experience as well.
~

~ Must {#ts-config-esModuleInterop}
  set `compilerOptions.esModuleInterop` to true.
~

~ Must {#ts-config-allowSyntheticDefaultImports}
  set `compilerOptions.allowSyntheticDefaultImports` to true
~

~ Must {#ts-config-target}
  set `compilerOptions.target`, but it can be any valid value so long as the final source distributions are compatible with the runtimes your library targets. See also [#ts-source-distros].
~

~ Should {#ts-config-isolatedModules}
  set `compilerOptions.isolatedModules` to true. Isolated modules prevent usage of features that prevent compiling TypeScript code on a file-by-file basis. This ensures your code remains maximally interoperable with compilers in the ecosystem (i.e. the Babel plugin).
~

~ Must {#ts-config-forceConsistentCasingInFileNames}
  set `compilerOptions.forceConsistentCasingInFileNames` to true. `forceConsistentCasingInFileNames` forces TypeScript to treat files as case sensitive. This ensures you don't get surprised by build failures when moving between platforms.
~

~ Must {#ts-config-module}
  set `compilerOptions.module` to "es6". Bundlers such as Rollup or Webpack should be used to produce the CommonJS/UMD build. The TypeScript compiler can also produce both source distributions using separate tsconfig files. When using this configuration, use the tsconfig.json's extends field to override module to "commonjs". This configuration is not recommended for large libraries. It is more resource intensive due to type checking your library twice.
~

~ Must {#ts-config-moduleResolution}
 set `compilerOptions.moduleResolution` to "node" if your library targets Node. Otherwise, it should be absent.
~

~ Must {#ts-config-declaration}
  set `compilerOptions.declaration` to true. The `--declaration` option tells TypeScript to emit a `d.ts` file that contains the public surface area of your library. TypeScript and editors use this file to provide intellisense and type checking capabilities. Ensure you reference this type declaration file from the `types` field of your package.json.
~

~ MustNot {#ts-config-no-experimentalDecorators}
  set `compilerOptions.experimentalDecorators` to `true`. The experimentalDecorators flag adds support for "v1 decorators" to TypeScript. Unfortunately the standards process has moved on to a somewhat incompatible second version that is not yet implemented by TypeScript. Taking a dependency on decorators now means signing up your users for potential breakage later. Until decorators become a standard feature, projects must not use decorators.
~

~ Must {#ts-config-sourceMap}
  set `compilerOptions.sourceMap` and `compilerOptions.declarationMap` to true. Shipping source maps in your package ensures clients can easily debug into your library code. `sourceMap` maps your emitted JS source to the declaration file and `declarationMap` maps the declaration file back to the TypeScript source that generated it. Be sure to include your original TypeScript sources in the package.
~

~ Must {#ts-config-importHelpers}
  set `compilerOptions.importHelpers` to true. Using external helpers keeps your package size down. Without this flag, TypeScript will add a helper block to each file that needs it. This results in duplication if multiple files are using the same language features. The file size savings using this option can be huge when using for example async functions in a number of different files.
~

#### TypeScript Coding Guidelines

~ ShouldNot {#ts-no-namespaces}
use TypeScript namespaces. Namespaces either use the `namespace` keyword explicitly, or the `module` keyword with a module name, e.g. `module Microsoft.ApplicationInsights { ... }`. Use top-level imports/exports with ECMAScript modules instead. Namespaces are a non-standard feature that makes your TypeScript code less compatible with standard ECMAScript and creates significant friction with the rest of the ecosystem.
~

~ ShouldNot {#ts-no-const-enums}
Avoid using const enums. Const enums require global understanding of your program to compile properly. As a result, const enums can't be used with Babel 7 which otherwise supports TypeScript. Avoiding const enums will make sure your code can be compiled by any tool. Use regular enums instead.
~