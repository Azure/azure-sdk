## Terminology {#ts-terminology; @h1-h2: decimal;}

- **AMD Modules**: A module format often used in the browser, e.g. as implemented by RequireJS.
- **CommonJS** / **CJS**: The module format of Node.js (require, module.exports).
- **ESM** / **ES Module**: ECMAScript Module, the standard import/export syntax defined by ECMAScript 6.
- **UMD**: Universal Module Definition, a superset of both CommonJS and AMD modules.

## README<span></span>.md {#ts-readme}

~Must {#ts-readme-ts-config}
document any required tsconfig settings and type dependencies in README.md under "Getting started". The section must be titled "Configure TypeScript" and come after the "Install the Package" sub-section. Common examples of required user configuration include enabling `compilerOptions.allowSyntheticDefaultImport` and installing an appropriate version of the `@types/node` package.
~

These guidelines are in addition to the [general README guidelines](#general-readme).


## npm Package {#ts-npm-package}

The following sections specify versioning, the contents of package.json and the various source distributions included in the npm package.

~ Must {#ts-npm-package-ownership}
have npm package ownership set to either the Azure or Microsoft orgs. (TODO: how to)
~

### Functionality {#ts-functionality}

~ Must {#ts-feature-support}
support 100% of the features supported by the backing services. Gaps in functionality cause confusion and frustration among developers.
~

### Configuration

These guidelines are in addition to the [general guidelines for configuration](#general-configuration).

~ Todo
use the `@azure/core-configuration` package which implements the above guidelines for the JS SDK.
~

### Supported Node Versions {#ts-supported-node-versions}

~ Must {#ts-node-support}
support [all LTS versions of Node](https://github.com/nodejs/Release#release-schedule) as well as newer versions up to and including the latest release. At time of writing, this means Node 6.x through Node 11.x.
~

### Versioning {#ts-versioning}

~ Must {#ts-versioning-semver}
version with [semver](https://semver.org/). Deprecated features and flags must offer an alternate stable or beta path for developers.
~

~ MustNot {#ts-versioning-no-ga-prerelease}
have a pre-release version or any additional build metadata for GA packages.
~

~ Must {#ts-versioning-preview; }
give preview packages a pre-release version of the format `1.0.0-Preview-XX` where XX is an integer. Pre-release package versions should not have additional build metadata.
~

~ MustNot {#ts-versioning-no-version-0}
use a major version of 0, even for preview packages.
~

For some types of libraries and applications, semantic versioning is more of a lofty ideal than a practical specification. Also, [one person's bug might be another person's key feature](https://xkcd.com/1172/). Nonetheless, package authors are required to do the best they can to comply with semver in a way that is useful for their consumers.

### File Layout {#ts-package-file-layout}

The following is the canonical file structure of your npm package:

~ Figure {#ts-figure-package-layout; caption: "Canonical file structure of an npm package"}


```
azure-library
├─ README.md
├─ LICENSE.md
├─ CONTRIBUTING.md
├─ dist
│  ├─ index.js
│  └─ ... *.js
│
├─ dist-esm
│  ├─ lib
│  │ ├─ index.js
│  │ └─ ... *.js
│  │
│  └─ test
│
├─ src
│  ├─ index.ts
│  └─ ... *.ts
│
├─ test
│  └─ ... *.ts
│
├─ package.json
├─ package-lock.json
└─ tsconfig.json
```
~

At a high level: original source goes in `./src`, main entrypoint goes in `./dist`, and additional source distributions go under `./dist-xxx`.

~ Must {#ts-file-layout-conventions}
follow these conventions where applicable.
~

~ May {#ts-can-have-other-files}
include other files.
~

~ MustNot {#ts-no-npmignore}
use .npmignore files to control which files are included in the package. All files must be added to the package explicitly using the [package.json files key](#ts-package-json-files-required). 
~

### Package.json{#ts-package-json}

The following sections describe the package.json file that must be included with every npm package. A compliant package.json file looks like Figure [#ts-figure-package-json]:

~ Figure {#ts-figure-package-json; caption: "An example package.json" }
```javascript
{
  "name": "@azure/package",
  "description": "A pithy but accurate description",
  "keywords": [
    "azure",
    "cloud",
    "..."
  ],
  "version": "1.0.0",
  "author": "Microsoft Corporation",
  "main": "./dist/index.js",
  "module": "./dist-esm/index.js",
  "types": "./dist-esm/index.d.ts",
  "engine": {
    "node": ">=6.0.0"
  },
  "scripts": {
    "build": "...",
    "test": "...",
    "prepack": "npm install && npm run build"
  },
  "files": [
    "dist",
    "dist-esm",
    "browser"
  ],
  "devDependencies": { /* ... */ },,
  "dependencies": { /* ... */ },
  "repository": "github:Azure/azure-sdk",
  "homepage": "https://github.com/Azure/azure-sdk-for-js/tree/master/sdk/servicebus/service-bus",
  "bugs": {
    "url": "https://github.com/Azure/azure-sdk-for-js/issues"
  },
  "license": "MIT",
  "sideEffects": false
}
```
~

~ Must {#ts-package-json-name}
set `name` to `@azure/<name>`, where `<name>` is the name of the service. Package names are kebab-case: all lowercase with words joined by dashes.
~

~ Must {#ts-package-json-homepage}
set `homepage` to a URL pointing to your library's readme inside the git repo. Since the repository link goes to the monorepo, this link exists to serve as an easier way to reach the actual package's source.  
~

~ Must {#ts-package-json-bugs}
set `bugs` to an object with a `url` key pointing to your library's issue tracker: https://github.com/Azure/azure-sdk-for-js/issues.
~

~ Must {#ts-package-json-repo}
set `repository` to the JS SDK monorepo - `github:Azure/azure-sdk-for-js`. Use of the `github:user/repo` short-hand is recommended.
~

~ Must {#ts-package-json-description}
set `description` to a useful but terse description of your library. The description is used and shown when searching for packages on npmjs.org, so it's important to be maximally descriptive white being as terse as possible.
~

~ Must {#ts-package-json-keywords}
set `keywords` to an array that includes at least the entries "Azure" and "cloud". It must also contain at least the name of your service. It should contain other entries relevant to your SDK.
~

~ Must {#ts-package-json-author}
set `author` to `"Microsoft Corporation"`.
~

~ Must {#ts-package-json-sideeffects}
set `sideEffects` to `false`. Side effecting libraries must be explicitly approved during design review. The sideEffects field is used by Webpack and potentially other tools as an indicator of how aggressively the package can be optimized. 

Side effects refer to modifications to the runtime environment of the program as a result of including a module. For example, including a polyfill library is a sideEffect as it mutates the global environment and later code depends on its presence. Side effects make it harder for tools to optimize your build and should be avoided.
~


~ Must {#ts-package-json-main-is-cjs}
set `main` to point to either a CommonJS or a UMD module. Main is the entry point of your application for Node users. See [#ts-source-distros-cjs] for more information.
~

~ MustNot {#ts-package-json-main-is-not-es6}
set `main` to include any ES6+ syntax.
~

~ Must {#ts-package-json-module}
set `module` to the ES6 module entrypoint of your application. 
Tools such as Webpack use this key to discover the static module graph of your application for optimization purposes. See [#ts-source-distros-esm] for more information.
~

~ Must {#ts-package-json-engine-is-present}
set `engine` to the versions of Node your library supports. See [#ts-supported-node-versions] for Node support requirements.
~

~ Must {#ts-package-json-required-scripts}
set `scripts` to an object with the following scripts:

- `"build"`: generates the main export of the application.
- `"test"`: runs your package's functional test suite for inner-loop development. Additional test tasks (e.g. for CI) are allowed but `test` must be how developers test your package during development.
~

~ Must {#ts-package-json-required-scripts-for-development}
include in `scripts` any tasks required for developing your package must have corresponding npm scripts. Packages should not depend on shell scripts to build or test their application as shell scripts often need to be platform-specific.
~

~ Must {#ts-package-json-files-required}
set `files` to an array containing paths of your package contents. Setting this field prevents extraneous files from ending up in your package by being explicit about which files you ship to npm. 
~

~ Must {#ts-package-json-types}
set `types` to point to the TypeScript type declarations for your library's public surface area, usually `"./types/index.d.ts"`.
~

~ Must {#ts-package-json-license}
set `license` to "MIT".
~

### Source Distributions{#ts-source-distros}

Modern npm packages often ship multiple source distributions targeting different usage scenarios. Packages must include the original source, a CJS or UMD build, and an ESM build (see below). Packages may include other source distributions as necessary for their particular usage scenarios.

The main downside of including additional source distributions is the increased package size (larger packages mean CIs take longer). However, performance, compatibility, and developer experience goals are often more important.

#### Original Source {#ts-source-distros-original}

~ Must {#ts-include-original-source}
  include original source in your package.
~

Including the original source in your package helps developers debug in and around your package. Go-to-definition can be a quick way to confirm how to use a function (especially if its implemented in TypeScript), and seeing useful names and readable source code in call stacks can help with debugging.

Including the original source also means we can aggressively optimize the build artefacts since users will not need to puzzle through the mangled code.

#### CommonJS {#ts-source-distros-cjs}

~ Must {#ts-include-cjs}
  include a CJS build in your package if you intend to support Node.
~

~ Todo
 Factor out browser requirements into a separate clause.
~

This is the distribution that Node users will consume.

If your library supports the Web platform, this distribution must be UMD modules. If your library is not intended for the browser, it is recommended to be UMD modules because the overhead over CJS is slight and it may make an eventual move to the Web platform easier later.

The CommonJS/UMD build's library name must be under the namespace `Microsoft.Azure`. For example, a hypothetical library Foo should configure its UMD global name as `Microsoft.Azure.Foo`. For Webpack, this entails configuring `output.library` to `['Microsoft', 'Azure', 'Foo']`. For Rollup, set `name` to `"Microsoft.Azure.Foo"`. This guideline ensures all Azure packages are accessed in a consistent manner when script-included into a browser.

This distribution must not contain any ES6 syntax. While ES6 is supported in most browsers and all supported versions of Node, many tools in the ecosystem do not support ES6 syntax and shipping ES6 syntax in your package will cause some consumers significant friction. Older versions of Uglify are the primary culprits, and they have dependencies across the ecosystem including for example the currently latest stable version of create-react-app.

The CommonJS/UMD build must be flattened. Rollup.js is the ecosystem best practice for producing a flattened CommonJS module.

TODO: include a roll-up config.

Flattening is the process of packing multiple modules into a single file. This process results in a significant reduction in load times for typical libraries, and can make a measurable impact on cold start for services like Azure Functions and App Service. While performance-sensitive developers will likely package their applications themselves, faster start-up of un-packaged applications is still important especially during development.

#### ESM {#ts-source-distros-esm}

~ Must {#ts-include-esm}
  include an ESM build in your package.
~

~ MustNot {#ts-include-esm-not-flattened}
  flatten the ESM build.
~

This distribution is mostly consumed by tools such as Webpack that need to understand your library's module graph in order to do optimizations like tree-shaking. Other than using es6 modules, this distribution should be "transpiled" to support the versions of Node and the browser you are targeting. This ensures users won't have to re-compile your library before it is usable in their host of choice.

Versions of Webpack prior to 4.0 would produce better optimized bundles if libraries' ESM builds were flattened. However, because flattening doesn't play so well with tree-shaking (the idea is to flatten modules together that would tree-shake out together), and because Webpack 4 can theoretically do a better job with unflattened ESM, it is not recommend to flatten the ESM module build.

### Modules {#ts-modules}

~ Must {#ts-modules-only-named}
  have named exports at the top level
~

~ MustNot {#ts-modules-no-default}
  have a default export at the top level
~

Azure packages authored using TypeScript export standard ES6 modules. As Node does not yet support ES6 modules natively, authoring ES6 modules for consumption in Node has a bit of friction. Most notable, a commonJS package can only import a single value. The difference between this model and ES6 modules where you can export many different things is the primary source of friction.

## Dependencies {#ts-dependencies}

Packages should avoid taking dependencies on tiny libraries as the cost of many small libraries adds up over time. Larger dependencies are subject to approval.

Packages should not depend directly on polyfills or other libraries that modify global scope. If developers using older runtimes need to polyfill some capability, the package's install and usage instructions should indicate this dependency.

See also [#general-dependencies].

## Coding Conventions

Library APIs must be idiomatic and must follow best practices.

### Error Handling {#ts-error-handling}

In addition to the guidelines in [#general-error-handling], the following guidelines apply to JavaScript libraries.

~ Must {#ts-error-handling}
use ECMAScript built-in error types for validation failures when appropriate. Specifically,

* Use `TypeError` for errors relating to passing in an incorrect type, such as an Object when a string is expected.
* Use `RangeError` for errors relating to values that are outside an allowable range, such as passing 0 for a number that must be greater than 0.
* Use `Error` for all other validation failures.
~

~ Should {#ts-error-handling-coersion}
coerce incorrect types into an appropriate type, if possible. JavaScript users expect some amount of fuzziness with parameters as the standard library tends to coerce types if possible. TypeScript users should get pedantic types as they have opted in to types and expect errors.
~

### Modern & Idiomatic JavaScript

~ Must {#ts-use-promises}
  use built-in promises for asynchronous operations. You may provide overloads which take callback. Do not import any promise polyfills or libraries.
~

Promises are a part of JavaScript as of ES6, and ES2016 and later editions added async functions and other features that make working with promises easier. Promises are broadly supported in the ecosystem and in Node since 0.12.

~ Should {#ts-use-async-functions}
  use async functions for implementing asynchronous library APIs.
~

Because async function transpilation is fairly heavy, there are cases where the added code size is undesirable. This is especially true for projects which must support ES5 runtimes without generators as the code to implement generators in ES5 is quite large. That said, async functions drastically improve the readability of complex async code. A middle ground is to use the Promise APIs directly for simple things and use async functions when you need to call async APIs along with control flow constructs like `if` and loops.

~ Must {#ts-use-iterators}
  use Iterators and Async Iterators for sequences and streams of all sorts.
~

Both of these protocols are built into the language (Iterators as of ES6, Async Iterators as of ES2018) and are easy to consume using for-of and for-await-of loops. Libraries should use generators to create iterators and async generators to create async iterators (subject to the same qualifications as async functions). Other "streaming" interfaces may be used where appropriate as long as they are idiomatic. Node streams may be used in node, but should not be polyfilled in the browser.

### TypeScript

~ Must {#ts-use-typescript}
  implement your library in TypeScript.
~

~ Must {#ts-ship-type-declarations}
  include type declarations for your library.
~

TypeScript is very popular in the ecosystem and its static types provide significant benefit for both the library authors and consumers. TypeScript also compiles modern JavaScript language features down to code compatible with much older runtimes.

#### tsconfig.json {#ts-tsconfig.json}

This section covers the contents of your tsconfig.json. After implementing this section, your tsconfig.json should look similar to the following example:

~ Figure {#ts-figure-tsconfig-json; caption: "An example tsconfig.json" }
```javascript
{
  "compilerOptions": {
    "declaration": true,
    "module": "es6",
    "moduleResolution": "node",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "outDir": "./dist-esm",
    "target": "es6",
    "sourceMap": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "forceConsistentCasingInFileNames": true,
    "importHelpers": true
  },
  "include": ["./src/**/*"],
  "exclude": ["node_modules"]
}
```
~

~ Must {#ts-config-exclude}
  have at least "node_modules" in the `exclude` array. This ensures TypeScript isn't needlessly type checking your dependencies.
~

~ MustNot {#ts-config-lib}
  use the `compilerOptions.lib` field. Built in typescript libraries (e.g. esnext.asynciterable) should be included via reference directives. See also [Microsoft/TypeScript#27416](https://github.com/Microsoft/TypeScript/issues/27416).
~

~ Must {#ts-config-strict}
  set `compilerOptions.strict` to true. The strict flag serves two purposes: it’s a best practice for developers as it provides the best TypeScript experience, and also, strict ensures that your type definitions are maximally pedantic so strict TypeScript consumers get their best experience as well.
~

~ Must {#ts-config-esModuleInterop}
  set `compilerOptions.esModuleInterop` to true.
~

~ Must {#ts-config-allowSyntheticDefaultImports}
  set `compilerOptions.allowSyntheticDefaultImports` to true
~

~ Must {#ts-config-target}
  set `compilerOptions.target`, but it can be any valid value so long as the final source distributions are compatible with the runtimes your library targets. See also [#ts-source-distros].
~

~ Should {#ts-config-isolatedModules}
  set `compilerOptions.isolatedModules` to true. Isolated modules prevent usage of features that prevent compiling TypeScript code on a file-by-file basis. This ensures your code remains maximally interoperable with compilers in the ecosystem (i.e. the Babel plugin).
~

~ Must {#ts-config-forceConsistentCasingInFileNames}
  set `compilerOptions.forceConsistentCasingInFileNames` to true. `forceConsistentCasingInFileNames` forces TypeScript to treat files as case sensitive. This ensures you don't get surprised by build failures when moving between platforms.
~

~ Must {#ts-config-module}
  set `compilerOptions.module` to "es6". Bundlers such as Rollup or Webpack should be used to produce the CommonJS/UMD build. The TypeScript compiler can also produce both source distributions using separate tsconfig files. When using this configuration, use the tsconfig.json's extends field to override module to "commonjs". This configuration is not recommended for large libraries. It is more resource intensive due to type checking your library twice.
~

~ Must {#ts-config-moduleResolution}
 set `compilerOptions.moduleResolution` to "node" if your library targets Node. Otherwise, it should be absent.
~

~ Must {#ts-config-declaration}
  set `compilerOptions.declaration` to true. The `--declaration` option tells TypeScript to emit a `d.ts` file that contains the public surface area of your library. TypeScript and editors use this file to provide intellisense and type checking capabilities. Ensure you reference this type declaration file from the `types` field of your package.json.
~

~ MustNot {#ts-config-no-experimentalDecorators}
  set `compilerOptions.experimentalDecorators` to `true`. The experimentalDecorators flag adds support for "v1 decorators" to TypeScript. Unfortunately the standards process has moved on to a somewhat incompatible second version that is not yet implemented by TypeScript. Taking a dependency on decorators now means signing up your users for potential breakage later. Until decorators become a standard feature, projects must not use decorators.
~

~ Must {#ts-config-sourceMap}
  set `compilerOptions.sourceMap` and `compilerOptions.declarationMap` to true. Shipping source maps in your package ensures clients can easily debug into your library code. `sourceMap` maps your emitted JS source to the declaration file and `declarationMap` maps the declaration file back to the TypeScript source that generated it. Be sure to include your original TypeScript sources in the package.
~

~ Must {#ts-config-importHelpers}
  set `compilerOptions.importHelpers` to true. Using external helpers keeps your package size down. Without this flag, TypeScript will add a helper block to each file that needs it. This results in duplication if multiple files are using the same language features. The file size savings using this option can be huge when using for example async functions in a number of different files.
~

#### TypeScript Coding Guidelines

TypeScript Namespaces should not be used. Namespaces either use the `namespace` keyword explicitly, or the `module` keyword with a module name, e.g. `module Microsoft.ApplicationInsights { ... }`. Use top-level imports/exports with ECMAScript modules instead. Namespaces are a non-standard feature that makes your TypeScript code less compatible with standard ECMAScript and creates significant friction with the rest of the ecosystem.

Avoid using const enums. Const enums require global understanding of your program to compile properly. As a result, const enums can't be used with Babel 7 which otherwise supports TypeScript. Avoiding const enums will make sure your code can be compiled by any tool. Use regular enums instead.

### Typedoc

You must annotate your source code with Typedoc declarations.

Typedoc comments give your users a pleasant tooling experience by pulling in your documentation in parameter help and in other tooling scenarios. [Typedoc tags](http://typedoc.org/guides/doccomments/) are very much inline with [jsdoc tags](http://usejsdoc.org/).

There is a work in progress tool called [tsdoc](https://github.com/Microsoft/tsdoc/) that aims to be the standard way to document TypeScript code. ANPS will migrate to this new documentation format, but in the meantime, the Docs team is set up to ingest only Typedoc, and thus Typedoc is the way to go for now.

## Documentation

Your package's documentation must consist of at least one quickstarts or tutorial in addition to samples, API documentation, and a reference overview. Some content, such as samples, must be included in-repo. Other content may be written externally for example on docs.microsoft.com. The following sections cover this content in more detail.

### Quickstarts &amp; Tutorials

Your package should have at least one [Quickstart](https://review.docs.microsoft.com/en-us/help/contribute/contribute-how-to-mvc-quickstart?branch=master) or [tutorial](https://review.docs.microsoft.com/en-us/help/contribute/contribute-how-to-mvc-tutorial?branch=master). This content must be discoverable from the Table of Contents of docs.microsoft.com for JavaScript or Node.js.

TODO: clarify which (node, js, or both?)

npm install statements for the package should be versionless.

### Code Samples

Your package's documentation must link to "Code Samples" under the "Samples" section of the ToC that links to the [Azure Samples Gallery](https://azure.microsoft.com/en-us/resources/samples/) or to a curated page in your documentation set that lists the samples available for your service.

Samples must use the latest coding conventions. It is recommended to make liberal use of modern JavaScript syntax like arrow functions and async functions as they remove boilerplate from your samples and let your library's API shine through better.

TODO: Should code samples be all TypeScript? Or have at least one TypeScript sample?

Sample repos provided by the service and docs team must link back to the service on docs.microsoft.com and the reference overview page for the library.

Sample code should be maintained and must use the latest major release of the library. Sample code repos should be reviewed for freshness and at least one commit should be made to a sample repo every semester.

Sample code snippets in quickstarts and tutorials should be easily grafted from the documentation into a users own application and not tied to variable declarations not covered in previous snippets in the content.

Code snippets should be optimized for ease of reading and comprehension over code compactness and efficiency unless the article context demands otherwise.

Samples must be runnable on macOS and Linux development environments and not tied to our developer toolchain.

Sample code repos should have clear names, descriptions and README files per the [samples guidance](https://review.docs.microsoft.com/help/contribute/contribute-get-started-azure-samples?branch=master) so that they make sense if accessed outside the context of docs.microsoft.com or the [Azure samples portal](https://azure.microsoft.com/en-us/resources/samples).

### API Documentation

API documentation must be auto-generated from source code annotations.

### Reference Overview

You must have a JavaScript or Node.js [reference overview page](https://review.docs.microsoft.com/en-us/help/contribute/contribute-reference-overviews?branch=master) for the client library under the Reference node in your content's ToC with a specific JavaScript or Node.js entry in that ToC. This reference overview must live in either the JavaScript Azure SDK reference repo or in your own content set alongside the rest of your docs.

The reference overview page must have a link to the quickstart and available samples for the JavaScript audience.

Use [this form](https://aka.ms/publish-on-docs) to on-board new library documentation. See [here](https://review.docs.microsoft.com/en-us/help/onboard/admin/reference/js-ts/road-to-docs?branch=master) for detailed instructions.