## Coding Conventions

Library APIs must be idiomatic and must follow best practices.


### Typedoc

You must annotate your source code with Typedoc declarations.

Typedoc comments give your users a pleasant tooling experience by pulling in your documentation in parameter help and in other tooling scenarios. [Typedoc tags](http://typedoc.org/guides/doccomments/) are very much inline with [jsdoc tags](http://usejsdoc.org/).

There is a work in progress tool called [tsdoc](https://github.com/Microsoft/tsdoc/) that aims to be the standard way to document TypeScript code. ANPS will migrate to this new documentation format, but in the meantime, the Docs team is set up to ingest only Typedoc, and thus Typedoc is the way to go for now.

## Documentation

Your package's documentation must consist of at least one quickstarts or tutorial in addition to samples, API documentation, and a reference overview. Some content, such as samples, must be included in-repo. Other content may be written externally for example on docs.microsoft.com. The following sections cover this content in more detail.

### Quickstarts &amp; Tutorials

Your package should have at least one [Quickstart](https://review.docs.microsoft.com/en-us/help/contribute/contribute-how-to-mvc-quickstart?branch=master) or [tutorial](https://review.docs.microsoft.com/en-us/help/contribute/contribute-how-to-mvc-tutorial?branch=master). This content must be discoverable from the Table of Contents of docs.microsoft.com for JavaScript or Node.js.

TODO: clarify which (node, js, or both?)

npm install statements for the package should be versionless.

### Code Samples

Your package's documentation must link to "Code Samples" under the "Samples" section of the ToC that links to the [Azure Samples Gallery](https://azure.microsoft.com/en-us/resources/samples/) or to a curated page in your documentation set that lists the samples available for your service.

Samples must use the latest coding conventions. It is recommended to make liberal use of modern JavaScript syntax like arrow functions and async functions as they remove boilerplate from your samples and let your library's API shine through better.

TODO: Should code samples be all TypeScript? Or have at least one TypeScript sample?

Sample repos provided by the service and docs team must link back to the service on docs.microsoft.com and the reference overview page for the library.

Sample code should be maintained and must use the latest major release of the library. Sample code repos should be reviewed for freshness and at least one commit should be made to a sample repo every semester.

Sample code snippets in quickstarts and tutorials should be easily grafted from the documentation into a users own application and not tied to variable declarations not covered in previous snippets in the content.

Code snippets should be optimized for ease of reading and comprehension over code compactness and efficiency unless the article context demands otherwise.

Samples must be runnable on macOS and Linux development environments and not tied to our developer toolchain.

Sample code repos should have clear names, descriptions and README files per the [samples guidance](https://review.docs.microsoft.com/help/contribute/contribute-get-started-azure-samples?branch=master) so that they make sense if accessed outside the context of docs.microsoft.com or the [Azure samples portal](https://azure.microsoft.com/en-us/resources/samples).

### API Documentation

API documentation must be auto-generated from source code annotations.

### Reference Overview

You must have a JavaScript or Node.js [reference overview page](https://review.docs.microsoft.com/en-us/help/contribute/contribute-reference-overviews?branch=master) for the client library under the Reference node in your content's ToC with a specific JavaScript or Node.js entry in that ToC. This reference overview must live in either the JavaScript Azure SDK reference repo or in your own content set alongside the rest of your docs.

The reference overview page must have a link to the quickstart and available samples for the JavaScript audience.

Use [this form](https://aka.ms/publish-on-docs) to on-board new library documentation. See [here](https://review.docs.microsoft.com/en-us/help/onboard/admin/reference/js-ts/road-to-docs?branch=master) for detailed instructions.