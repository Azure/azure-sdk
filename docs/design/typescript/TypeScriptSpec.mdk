Madoko documentation: http://madoko.org/reference.html

Title       : Azure SDK Design Guidelines for TypeScript
Title Note  : Version 1.0.0-preview2
Author      : Brian Terlson
Affiliation : Azure SDK Team / JS &amp; TS
Email       : brian.terlson@microsoft.com
Logo        : False
Embed       : False
css         : custom.css

[INCLUDE=../components.mdk]

[TITLE]

This document describes API design guidelines for Azure client libraries targeting Node and the web platform and authored in TypeScript. It begins with general guidelines applicable to all Azure client libraries whatever the target platform, followed by TypeScript-specific guidance.

~ Must {#ts-azure-scope}
follow these conventions if you publish under the `@azure` scope in npm.
~

~ Should {#ts-azure-scope-optional}
follow these guidelines even if you're not publishing an Azure library under the `@azure` scope.
~

[TOC]


# Introduction

[INCLUDE=../general/DesignPrinciples.mdk]
[INCLUDE=../general/Terminology.mdk]
[INCLUDE=../typescript/Terminology.mdk]
[INCLUDE=../general/Definitions.mdk]
[INCLUDE=../general/Process.mdk]
[INCLUDE=../general/OpenSource.mdk]

# The Client library

[INCLUDE=../typescript/PlatformSupport.mdk]

## The API surface {#general-apisurface}

The API surface of your client library must have the most thought as it is the primary interaction that the consumer has with your service.  

[INCLUDE=../typescript/Namespace.mdk]
[INCLUDE=../typescript/APIShape.mdk]
[INCLUDE=../typescript/Pagination.mdk]
[INCLUDE=../general/LRO.mdk]
[INCLUDE=../typescript/LRO.mdk]
[INCLUDE=../general/OtherProtocols.mdk]

## Implementing the API {#general-implementing}

Once you've worked through an acceptable API surface, you can start implementing the service clients.

~ Should {#ts-should-use-template}
Use the [TypeScript Client Library Template](https://github.com/Azure/azure-sdk-for-js/tree/master/sdk/template/template).
~

[INCLUDE=../general/Configuration.mdk]
[INCLUDE=../typescript/Configuration.mdk]
[INCLUDE=../general/ParameterValidation.mdk]
[INCLUDE=../general/PipelineUsage.mdk]
[INCLUDE=../general/APIGeneral.mdk]
[INCLUDE=../general/Errors.mdk]
[INCLUDE=../typescript/Errors.mdk]
[INCLUDE=../general/Logging.mdk]
[INCLUDE=../typescript/Logging.mdk]
[INCLUDE=../general/DistributedTracing.mdk]
[INCLUDE=../typescript/DistributedTracing.mdk]
[INCLUDE=../typescript/Dependencies.mdk]
[INCLUDE=../general/CommonLibrary.mdk]
[INCLUDE=../general/Documentation.mdk]
[INCLUDE=../typescript/Documentation.mdk]

[INCLUDE=../typescript/NPMPackage.mdk]
[INCLUDE=../typescript/Testing.mdk]

# Releasing your Client library

Releasing your client library requires coordination between several groups, including the Azure SDK engineering systems, service, support, and documentation teams.  

[INCLUDE=../general/Releasing.mdk]
[INCLUDE=../general/Versioning.mdk]
[INCLUDE=../typescript/Versioning.mdk]

# Appendix: Azure Core {#general-azure-core}

Azure Core is a library that provides common services to other client libraries.  These services include:

* [The HTTP pipeline](#azurecore-http-pipeline)
* [Global configuration](#azurecore-configuration)
* [Credentials](#azurecore-credentials)

The following sections define the requirements for the Azure Core library.  If you're implementing a client library in a language that already has an Azure Core library, you don't need to read this section.  It's primarily targeted at developers who work on the Azure Core library.

[INCLUDE=../typescript/AzureCore.mdk]
[INCLUDE=../general/AzureCorePipeline.mdk]
[INCLUDE=../general/AzureCoreConfiguration.mdk]
[INCLUDE=../general/AzureCoreCredentials.mdk]

