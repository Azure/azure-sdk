## NPM Package {#ts-npm-package}

~ Must {#ts-npm-package-ownership}
have npm package ownership set to either the Azure or Microsoft organizations.
~

### File Layout {#ts-package-file-layout}

Use the following canonical file structure for your npm package:

~ Figure {#ts-figure-package-layout; caption: "Canonical file structure of an npm package"}
```
azure-library
├─ README.md
├─ LICENSE.md
├─ CONTRIBUTING.md
├─ browser
│  ├─ service.js
│  └─ service.min.js
│
├─ dist
│  ├─ index.js
│  └─ ... *.js
│
├─ dist-esm
│  ├─ lib
│  │ ├─ index.js
│  │ └─ ... *.js
│  │
│  └─ test
│
├─ src
│  ├─ index.ts
│  └─ ... *.ts
│
├─ test
│  └─ ... *.ts
│
├─ package.json
├─ package-lock.json
└─ tsconfig.json
```
~

At a high level: original source goes in `./src`, main entrypoint goes in `./dist`, and additional source distributions go under `./dist-xxx`.

~ Must {#ts-file-layout-conventions}
follow these conventions where applicable.
~

~ May {#ts-can-have-other-files}
include other files.
~

~ MustNot {#ts-no-npmignore}
use `.npmignore` files to control which files are included in the package. All files must be added to the package explicitly using the [package.json files key](#ts-package-json-files-required).
~

### Package.json{#ts-package-json}

The following sections describe the package.json file that must be included with every npm package. A compliant package.json file looks like Figure [#ts-figure-package-json]:

~ Figure {#ts-figure-package-json; caption: "An example package.json" }
```javascript
{
  "name": "@azure/package",
  "description": "A pithy but accurate description",
  "keywords": [
    "azure",
    "cloud",
    "..."
  ],
  "version": "1.0.0",
  "author": "Microsoft Corporation",
  "main": "./dist/index.js",
  "module": "./dist-esm/index.js",
  "browser": {
    "./dist-esm/src/index.js": "./browser/index.js"
  },
  "types": "./dist-esm/index.d.ts",
  "engine": {
    "node": ">=6.0.0"
  },
  "scripts": {
    "build": "...",
    "test": "...",
    "prepack": "npm install && npm run build"
  },
  "files": [
    "dist",
    "dist-esm",
    "browser"
  ],
  "devDependencies": { /* ... */ },,
  "dependencies": { /* ... */ },
  "repository": "github:Azure/azure-sdk",
  "homepage": "https://github.com/Azure/azure-sdk-for-js/tree/master/sdk/servicebus/service-bus",
  "bugs": {
    "url": "https://github.com/Azure/azure-sdk-for-js/issues"
  },
  "license": "MIT",
  "sideEffects": false
}
```
~

~ Must {#ts-package-json-name}
set `name` to `@azure/<name>`, where `<name>` is the name of the service. Package names are kebab-case: all lowercase with words joined by dashes.
~

~ Must {#ts-package-json-homepage}
set `homepage` to a URL pointing to your library's readme inside the git repo. Since the repository link goes to the monorepo, this link exists to serve as an easier way to reach the actual package's source.  
~

~ Must {#ts-package-json-bugs}
set `bugs` to an object with a `url` key pointing to your library's issue tracker: https://github.com/Azure/azure-sdk-for-js/issues.
~

~ Must {#ts-package-json-repo}
set `repository` to the JS SDK monorepo - `github:Azure/azure-sdk-for-js`. Use of the `github:user/repo` short-hand is recommended.
~

~ Must {#ts-package-json-description}
set `description` to a useful but terse description of your library. The description is used and shown when searching for packages on [npmjs.org](https://npmjs.org).
~

~ Must {#ts-package-json-keywords}
set `keywords` to an array that includes at least the entries "Azure" and "cloud". It must also contain at least the name of your service. It should contain other entries relevant to your SDK.
~

~ Must {#ts-package-json-author}
set `author` to `"Microsoft Corporation"`.
~

~ Must {#ts-package-json-sideeffects}
set `sideEffects` to `false`. Side effecting libraries must be explicitly approved during design review. The `sideEffects` field is used by [Webpack](https://webpack.js.org) and potentially other tools as an indicator of how aggressively the package can be optimized.

Side effects are modifications to the runtime environment of the program. For example, including a polyfill library is a `sideEffect`. It mutates the global environment. Side effects make it harder for tools to optimize your build and should be avoided.
~


~ Must {#ts-package-json-main-is-cjs}
set `main` to point to either a CommonJS or a UMD module. Main is the entry point of your application for Node users.
~

~ MustNot {#ts-package-json-main-is-not-es6}
set `main` to include any ES6+ syntax.
~

~ Must {#ts-package-json-module}
set `module` to the ES6 module entrypoint of your application.

Tools such as [Webpack](https://webpack.js.org) use this key to discover the static module graph of your application for optimization purposes.
~

~ Must {#ts-package-json-browser}
include a file map in the `browser` object if your library supports the browser.  The file map must include the `main` entry, and map it to the corresponding (unminified) browser code.

For example, the following JSON snippet demonstrates the minimum requirements:

```json
{
    "main": "./dist/index.js",
    "browser": {
        "./dist/index.js": "./dist/browser/index.js"
    }
}
```
~

~ Must {#ts-package-json-engine-is-present}
set `engine` to the versions of Node your library supports. See [#ts-supported-node-versions] for Node support requirements.
~

~ Must {#ts-package-json-required-scripts}
set `scripts` to an object with the following scripts:

- `"build"`: generates the main export of the application.
- `"test"`: runs your package's functional test suite for inner-loop development. Additional test tasks (for example, continuous integration tests) are allowed but `test` must be how developers test your package during development.
~

~ MustNot {#ts-package-json-required-scripts-for-development}
depend on shell scripts to build or test the package.  Shell scripts need to be platform-specific.  Include a `script` for any task required during development of your package.
~

~ Must {#ts-package-json-files-required}
set `files` to an array containing paths of your package contents. Setting this field prevents extraneous files from ending up in your package by being explicit about which files you ship to npm. 
~

~ Must {#ts-package-json-types}
set `types` to point to the TypeScript type declarations for your library's public surface area, usually `"./types/index.d.ts"`.
~

~ Must {#ts-package-json-license}
set `license` to "MIT".
~


### Source Distributions{#ts-source-distros}

Modern npm packages often ship multiple source distributions targeting different usage scenarios. Packages must include the original source, a CJS or UMD build, and an ESM build (see below). Packages may include other source distributions as necessary for their particular usage scenarios.

The main downside of including additional source distributions is the increased package size (larger packages mean CIs take longer). However, performance, compatibility, and developer experience goals are often more important.

#### Original Source {#ts-source-distros-original}

~ Must {#ts-include-original-source}
include the source code in your package.  Include your source directory in the `files` array in your `package.json`.

The source code in your package helps developers debug your package. _Go-to-definition_ is a quick way to confirm how to use a function. Seeing useful names and readable source code in call stacks helps with debugging. We can aggressively optimize the build artifacts since users won't need to puzzle through the mangled code.
~


#### CommonJS {#ts-source-distros-cjs}

~ Must {#ts-include-cjs}
include a CommonJS (CJS) build in your package if you intend to support Node.
~

~ Should {#ts-use-umd}
distribute your package as a UMD module if you intend to support browsers.

A UMD module is recommended even if your library isn't intended for the browser.  The overhead of UMD over CJS is slight and it will make an eventual move to the Web platform easier later.
~

When building the CommonJS module, the library name must be under the `Azure` namespace.  Refer to the [namespace guidelines](#ts-namespace) to determine the correct namespace.

~ Must {#ts-flatten-umd}
flatten the CommonJS or UMB module.  [Rollup](https://rollupjs.org) is recommended for producing a flattened module.

The process of packing multiple modules into a single file is known as _flattening_. It's used to significantly reduce the load time for the library.  Flattening can make a measurable impact on cold start times for services such as Azure Functions. While performance-sensitive developers will likely package their applications themselves, faster start-up is still important especially during development.
~

#### ESM {#ts-source-distros-esm}

~ Must {#ts-include-esm}
  include an ECMAScript Module (ESM) build in your package.
~

~ MustNot {#ts-include-esm-not-flattened}
  flatten the ESM build.
~

An ESM distribution is consumed by tools such as [Webpack](https://webpack.js.org) that optimize the module graph. It should be "transpiled" to support the runtime versions you're targeting. Versions of Webpack before Webpack 4.0 produce better optimized bundles if the ESM build is flattened. However, flattening doesn't play so well with tree-shaking. The latest versions of Webpack do a better job when using an unflattened ESM build.


#### Browser Builds {#ts-source-distros-browser}

~ Should
provide a browser build for your library.
~

~ Must
be in UMD module format.
~

~ Must
name the UMD global according to the [namespace guidelines](#ts-namespace).
~

~ Must
provide both minified and non-minified versions, both with source mapping.
~

~ Must
place browser builds in a top level `browser` folder. The name of the file should be the service name. Append `.min` to the name of minified files. For example, Storage Blob should have `storage-blob.min.js` and `storage-blob.js` under `./browser`.
~

### Modules {#ts-modules}

~ Must {#ts-modules-only-named}
  have named exports at the top level
~

~ MustNot {#ts-modules-no-default}
  have a default export at the top level
~

Azure packages authored using TypeScript export standard ES6 modules. As Node doesn't support ES6 modules natively, authoring ES6 modules for consumption in Node has a bit of friction. Most notably, a commonJS package can only import a single value. 
