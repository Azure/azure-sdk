## General .NET API Design

~ Must {#dotnet-follow-official-framework-guidelines}
Follow the official [Framework Design Guidelines](https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/). See Appendix A (at the end of this document) for design guidelines that are commonly overlooked in existing Azure SDKs.

**NOTE** additional guidelines in this section overrule the Framework Design Guidelines
~

~ Must {#dotnet-use-azure-pipeline}
Use the Azure HTTP Pipeline to implement all methods that call Azure services. The pipeline takes care of many [General Azure SDK Guidelines](#common-general), e.g. telemetry, logging, retries, mockability. Details of the pipeline design and usage are described in Appendix B below.
~

## Basic Azure SDK Design Pattern

TODO:
This scection describes the basic shape of a typical Azure SDK:

- basic shape of the client types
- basic shape of service call methods
- cancellations
- return type (Response<T>) of service methods
- pipeline
- customizing service client and service method calls

## Naming Gudelines

### Namespace Naming

~ Must {#dotnet-namespace-registration}
register all namespaces with adparch@microsoft.com,
i.e. send email about your proposed namespaces to this address to start a discussion.
~


~ Must {#dotnet-namespace-format}
adhere to the following scheme when choosing a namespace: `Azure.<group>.<service>[.<feature>]`. For example, `Azure.Storage.Blobs`, `Azure.CognitiveServices.Speech.Recognition`
~

~ MustNot {#dotnet-namespace-format-service-name}
place service API in second level namespace, e.g. `Azure.KeyVault`
~

~ Should {#dotnet-namespace-format-pre-approved}
use one of the following pre-approved namespace groups:

- Azure.Diagnostics (e.g. Azure.Diagnostics.OperationalInsights)
- Azure.Cognitive (e.g. Azure.Cognitive.FaceRecognition)
- Azure.Iot (e.g. Azure.Iot.Hub)
- Azure.Networking (e.g. Azure.Networking.EventHub)
- Azure.Runtime (e.g. Azure.Runtime.VirtualMachines)
- Azure.Security (e.g. Azure.Security.KeyVault)
- Azure.Storage (e.g. Azure.Storage.Blobs)
~

### Type Naming

TODO: XxxClient, XxxResource, etc.

## Packaging and Versioning

TODO

## Error Reporting

TODO

## Authentication

TODO

## Repository Guidelines

TODO:

- source code
- tests
- documentation
- samples

## Common Type Usage

TODO:

- Etag
- Response\<T\>
- System.Uri

## Commonly Overlooked .NET API Design Guidelines { @h1-h2: "A" }

Some .NET Design Guidelines have been notoriously overlooked in existing Azure SDKs. This section serves as a way to highlight these guidelines.

~ MustNot {#dotnet-no-abstractions}
have abstractions (interfaces of abstract classes) unless types both implement and consume them (i.e. you have parameters typed as the abstraction).
~

~ MustNot {#dotnet-no-interfaces-for-abstract-classes}
use interfaces if you can use abstract classes. The only reasons to use an interface are: a) you need to “multiple-inherit”, b) you want structs to implement and abstraction.
~

~ MustNot {#dotnet-no-generic-terms}
use very generic words and terms for type names, e.g. do not use names like “OperationResponse”, “DataCollection” etc.
~

~ ShouldNot {#dotnet-no-unclear-parameter-types}
use parameters types where it’s not clear what valid values are supported, e.g. string parameters are often like that.
~

~ MustNot {#dotnet-no-empty-types}
have empty types (types with no members)
~

## Azure Http Pipeline

TODO:
For now just link to sources: https://github.com/Azure/azure-sdk-for-net-lab/tree/master/Core/Azure.Core
Once we publish Nuget package, this will be updated.

## Appendix Z

- integration with ASP.NET application model
- performance