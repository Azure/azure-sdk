## Logging {#general-logging}

~ Must {#general-logging-pluggable}
support pluggable log handlers.
~

~ Must {#general-logging-pluggable}
make it easy for a customer to enable logging output to the Console. The specific steps required to enable logging to the console must be documented. 
~

~ Must {#general-logging-levels}
use one of the following log levels when emitting logs: Verbose (i.e. details), Informational (things happened), Warning (might be a problem or not), and Error.
~

~ Must {#general-logging-levels-error}
use the Error logging level for failures that it is unlikely that the application will recover from (out of memory etc.)
~

~ Must {#general-logging-levels-warning}
use the Warning logging level when a function fails to perform its intended task. This generally means that the function will raise an exception.
It does not include occurances of self-healing events (e.g. when a request will be automatically retried)
~

~ Must {#general-logging-levels-informational}
use the Informational logging level when a function operates normally.
~

~ Must {#general-logging-levels-informational}
use the Verbose logging level for detailed trouble shooting scenarios. This is primarily intended for developers or system administrators to diagnose specific failures.
~

~ MustNot {#general-logging-no-sensitive-info}
send sensitive information in log levels other than Verbose, e.g. remove account keys when logging headers.
~

~ Must {#general-logging-requests-in-info}
log request line, response line, and headers, as Informational message.
~

~ Must {#general-logging-info-if-cancelled}
log an Informational message, if a service call is cancelled.
~

~ Must {#general-logging-error-if-exceptions}
log exceptions thrown as a Warning level message. If the log level set to Verbose, append stack trace information to the message.
~

~ Todo
describe format/syntax of the log messages.
~

~ Todo
provide and describe pipeline APIs for logging.
~
