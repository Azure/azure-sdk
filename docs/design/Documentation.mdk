## Documentation

There are several documentation deliverables that must be included in or as a companion to your client library. Beyond complete and helpful API documentation within the code itself (the "docstrings"), you need a great README and other supporting documentation.

### README<span></span>.md

~ Must
author a [README](https://github.com/Azure/azure-sdk/blob/master/docs/README-TEMPLATE.md) and include it in your client library's folder within the repository. See the [example README](https://github.com/Azure/azure-sdk/blob/master/docs/README-EXAMPLE.md) for Cosmos DB to get an idea for what this should look like.
~

~ Must
include your service's content developer by @mentioning them in the PR for the README (if your service has an assigned content developer).
~

### API reference

*"Doc it so you never hear about it again."*

~ Must
document every public-facing member within your library's code.
~

~ Must
include [code snippets](#code-snippets) for commonly used operations within your library.
~

~ MustNot
simply restate the type or member name as its documentation. For example, do not write "A Thing." for the description of the `Thing` interface, or "Gets a Thing." for the `GetThing()` method. Instead, help a developer new to your library, service, or Azure learn what that type or member is, how to use it, and how to recover from errors simply by reading your API reference documentation.
~

~ Must
include information about constructor and function parameters beyond just their type names. For example, how should a developer create or otherwise obtain an instance of the parameter type that the method requires?
~

~ Must
include usage information for return types, not just the type name. What exactly is returned *within* the instance of that type, and how should it be interacted with? For example, how should a developer "unpack" and use the data structure that a method returns? Is there another function or method in the library that can help process the data?
~

~ Must
document the errors returned by the library.Â Indicate which errors should be handled at runtime and which are preconditions that should not be caught (as they indicate programming errors).
~

~ Should
include hyperlinks from the reference documentation to conceptual articles on docs.microsoft.com when they're available.
~

~ MustNot
use hyperlinks to docs.microsoft.com articles as a substitute for completely documenting a type or member.
~

~ ShouldNot
link to non-Microsoft properties unless you've obtained approval for the link. We have less control over content on non-Microsoft sites which can lead to higher frequency of 404s and stale or mismatched content, with no other recourse than modifying the hyperlink in source code.
~

~ Must
use automated tools to verify documentation coverage and format in your code. Most languages have at least one linter for verifying in-code documentation. For example, [flake8-docstrings](https://gitlab.com/pycqa/flake8-docstrings) for Python.
~

### Code snippets

~ Must
include example code snippets alongside your library's code within the repository. The snippets should clearly and succinctly demonstrate the operations most developers need to perform with your library. Include snippets for every common operation, and especially for those that are complex or might otherwise be difficult for new users of your library.
~

~ Must
build and test your example code snippets using the repository's continuous integration (CI) to ensure they remain functional.
~

~ Must
include the example code snippets in your library's API reference. If the language and its tools support it, ingest these snippets directly into your API reference in your library's source code. For example, use the `.. literalinclude::` directive in Python docstrings to instruct Sphinx to [ingest the snippets automatically](http://www.sphinx-doc.org/en/1.5/markup/code.html#includes).
~

~ Must
include example code snippets in the README and Quickstart for the "champion" scenarios defined for your library.
~

~ MustNot
combine more than one operation in a code snippet unless it's required for demonstrating the type or member, or it's *in addition to* existing snippets that demonstrate atomic operations. For example, a Comsos DB code snippet should not include both account and container creation operations--create two different snippets, one for account creation, and one for container creation.

Combined operations cause unnecessary friction for a library consumer by requiring knowledge of the operations outside the their current focus. It requires them to first understand the tangential code surrounding the operation they're working on, then carefully extract just code they need for their task. The developer can no longer simply copy and paste the code snippet into their solution.
~

### Quickstart

~ Must
ensure a Quickstart is published on docs.microsoft.com that helps developers get started with the library. If your service has an assigned content developer, let them know when your README is complete so they can base the Quickstart on your README. If your service doesn't have an assigned content developer, write your Quickstart by following [How to write an Azure client library Quickstart](https://review.docs.microsoft.com/en-us/help/contribute/contribute-how-to-write-library-quickstart?branch=pr-en-us-1752) (currently in *preview*).
~

### General guidelines

*"Doc it so you never hear about it again."*

~ Must
document your library into silence. Preempt developers' usage questions before they ask. Minimize GitHub issues you have to respond to by clearly explaining your API in the docstrings. Providing information on service limits and errors they might encounter, and how to avoid and recover from those errors.

The less questions you have to answer about your library, the more time you have to build things.
~

~ Must
adhere to the specifications set forth in the Microsoft style guides for public-facing documentation. This applies to both long-form documentation like a README and the docstrings in your code.

* [Microsoft Writing Style Guide](https://worldready.cloudapp.net/StyleGuide/Read?id=2700)
* [Microsoft Cloud Style Guide](https://worldready.cloudapp.net/Styleguide/Read?id=2696)
~