parameters:
- name: CommonScriptPath
  type: string
  default: ""
- name: ChangedPackagesPath
  type: string
  default: ""
- name: DefaultBranch
  type: string
  default: ""
- name: PrBranchName
  type: string
  default: "CreateOrUpdateReleaseDataFor"
- name: Repos
  type: object
  default:
    azure-sdk-for-java:
      Language: java
    azure-sdk-for-js:
      Language: js
    azure-sdk-for-net:
      Language: dotnet
    azure-sdk-for-python:
      Language: python

steps:
  - pwsh: |
      $releasePeriod = Get-Date -Format "yyyy-MM"
      Write-Host "##vso[task.setvariable variable=ReleasePeriod]$releasePeriod"
    displayName: Set Release Period Value

  - pwsh: |
      $(System.DefaultWorkingDirectory)/azure-sdk-tools/eng/common/scripts/Delete-RemoteBranches.ps1 -RepoOwner "azure-sdk" `
      -ForkRepoOwner "Azure" -RepoName "azure-sdk" -BranchPrefix '${{ parameters.PrBranchName }}' -AuthToken $(azuresdk-github-pat)
    displayName: Clean Up Stale Branches

  - ${{ each repo in parameters.Repos }}:
    - pwsh: |
        $ErrorActionPreference = "Continue"

        $RemoteName = "azure-sdk-fork"
        $PRBranchName = "${{ parameters.PrBranchName }}_${{ repo.value.Language }}_$(ReleasePeriod)"
        Write-Host "##vso[task.setvariable variable=PRBranchName]$PRBranchName"

        # Fetch and checkout remote branch if it already exists otherwise create a new branch.
        git ls-remote --exit-code --heads $RemoteName $PRBranchName
        if ($LASTEXITCODE -eq 0) {
          Write-Host "git fetch $RemoteName $PRBranchName"
          git fetch $RemoteName $PRBranchName

          Write-Host "git checkout $PRBranchName."
          git checkout $PRBranchName
        }
        else {
          # Reset back to the head of default so we can build on top of that if the branch doesn't already exist.
          git reset --hard origin/${{ parameters.DefaultBranch }}

          Write-Host "git checkout -b $PRBranchName."
          git checkout -b $PRBranchName
        }
      displayName: Checkout Previous PRBranch if it exist.
      workingDirectory: $(System.DefaultWorkingDirectory)/azure-sdk

    - task: PowerShell@2
      displayName: 'Generate ReleaseNotes for the Release Period'
      inputs:
        pwsh: true
        workingDirectory: $(System.DefaultWorkingDirectory)
        filePath: $(System.DefaultWorkingDirectory)/azure-sdk/eng/scripts/Generate-ReleaseNotes.ps1
        arguments: >
          -releasePeriod $(ReleasePeriod)
          -commonScriptPath ${{ parameters.CommonScriptPath }}
          -releaseDirectory $(System.DefaultWorkingDirectory)/azure-sdk/releases
          -repoLanguage ${{ repo.value.Language }}
          -changedPackagesPath ${{ parameters.ChangedPackagesPath }}

    - template: eng/common/pipelines/templates/steps/create-pull-request.yml@azure-sdk-tools
      parameters:
        RepoName: azure-sdk
        BaseBranchName: ${{ parameters.DefaultBranch }}
        PRBranchName: $(PRBranchName)
        CommitMsg: "${{ repo.value.Language }} release notes for the $(ReleasePeriod) release"
        PRTitle: "${{ repo.value.Language }} release notes for the $(ReleasePeriod) release"
        PRBody: "This is an automated pull request to gather the ${{ repo.value.Language }} release notes for the $(ReleasePeriod) release. See [Producing Release Notes](https://github.com/Azure/azure-sdk/blob/master/docs/policies/releasenotes.md#producing-release-notes) for details of the processing."
        WorkingDirectory: $(System.DefaultWorkingDirectory)/azure-sdk
        ScriptDirectory: $(System.DefaultWorkingDirectory)/azure-sdk-tools/eng/common/scripts
